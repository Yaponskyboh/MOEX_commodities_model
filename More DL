{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "kr9vAeEQlRVG"
      },
      "source": [
        "# Домашнее задание 2. Классификация изображений."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "BxX49gLclRVJ"
      },
      "source": [
        "В этом задании потребуется обучить классификатор изображений. Будем работать с датасетом, название которого раскрывать не будем. Можете посмотреть самостоятельно на картинки, которые в есть датасете. В нём 200 классов и около 5 тысяч картинок на каждый класс. Классы пронумерованы, как нетрудно догадаться, от 0 до 199. Скачать датасет можно вот [тут](https://yadi.sk/d/BNR41Vu3y0c7qA).\n",
        "\n",
        "Структура датасета простая -- есть директории train/ и val/, в которых лежат обучающие и валидационные данные. В train/ и val/ лежат директориии, соответствующие классам изображений, в которых лежат, собственно, сами изображения.\n",
        " \n",
        "__Задание__. Необходимо выполнить два задания\n",
        "\n",
        "1) Добейтесь accuracy **на валидации не менее 0.44**. В этом задании **запрещено** пользоваться предобученными моделями и ресайзом картинок. 5 баллов\n",
        "\n",
        "2) Добейтесь accuracy **на валидации не менее 0.84**. В этом задании делать ресайз и использовать претрейн можно. 5 баллов\n",
        "\n",
        "Напишите краткий отчёт о проделанных экспериментах. Что сработало и что не сработало? Почему вы решили, сделать так, а не иначе? Обязательно указывайте ссылки на чужой код, если вы его используете. Обязательно ссылайтесь на статьи / блогпосты / вопросы на stackoverflow / видосы от ютуберов-машинлернеров / курсы / подсказки от Дяди Васи и прочие дополнительные материалы, если вы их используете. \n",
        "\n",
        "Ваш код обязательно должен проходить все `assert`'ы ниже.\n",
        "\n",
        "__Использовать внешние данные для обучения строго запрещено в обоих заданиях. Также запрещено обучаться на валидационной выборке__.\n",
        "\n",
        "\n",
        "__Критерии оценки__: Оценка вычисляется по простой формуле: `min(10, 10 * Ваша accuracy / 0.44)` для первого задания и `min(10, 10 * (Ваша accuracy - 0.5) / 0.34)` для второго. Оценка округляется до десятых по арифметическим правилам.\n",
        "\n",
        "\n",
        "__Советы и указания__:\n",
        " - Наверняка вам потребуется много гуглить о классификации и о том, как заставить её работать. Это нормально, все гуглят. Но не забывайте, что нужно быть готовым за скатанный код отвечать :)\n",
        " - Используйте аугментации. Для этого пользуйтесь модулем `torchvision.transforms` или библиотекой [albumentations](https://github.com/albumentations-team/albumentations)\n",
        " - Можно обучать с нуля или файнтюнить (в зависимости от задания) модели из `torchvision`.\n",
        " - Рекомендуем написать вам сначала класс-датасет (или воспользоваться классом `ImageFolder`), который возвращает картинки и соответствующие им классы, а затем функции для трейна по шаблонам ниже. Однако делать это мы не заставляем. Если вам так неудобно, то можете писать код в удобном стиле. Однако учтите, что чрезмерное изменение нижеперечисленных шаблонов увеличит количество вопросов к вашему коду и повысит вероятность вызова на защиту :)\n",
        " - Валидируйте. Трекайте ошибки как можно раньше, чтобы не тратить время впустую.\n",
        " - Чтобы быстро отладить код, пробуйте обучаться на маленькой части датасета (скажем, 5-10 картинок просто чтобы убедиться что код запускается). Когда вы поняли, что смогли всё отдебажить, переходите обучению по всему датасету\n",
        " - На каждый запуск делайте ровно одно изменение в модели/аугментации/оптимайзере, чтобы понять, что и как влияет на результат.\n",
        " - Фиксируйте random seed.\n",
        " - Начинайте с простых моделей и постепенно переходите к сложным. Обучение лёгких моделей экономит много времени.\n",
        " - Ставьте расписание на learning rate. Уменьшайте его, когда лосс на валидации перестаёт убывать.\n",
        " - Советуем использовать GPU. Если у вас его нет, используйте google colab. Если вам неудобно его использовать на постоянной основе, напишите и отладьте весь код локально на CPU, а затем запустите уже написанный ноутбук в колабе. Авторское решение задания достигает требуемой точности в колабе за 15 минут обучения.\n",
        " \n",
        "Good luck & have fun! :)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "BaPSFxIz96tY",
        "outputId": "3f5d294a-0a71-4459-a17b-d11ea9c4032f"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/\n",
            "Collecting wandb\n",
            "  Downloading wandb-0.13.5-py2.py3-none-any.whl (1.9 MB)\n",
            "\u001b[K     |████████████████████████████████| 1.9 MB 15.5 MB/s \n",
            "\u001b[?25hCollecting docker-pycreds>=0.4.0\n",
            "  Downloading docker_pycreds-0.4.0-py2.py3-none-any.whl (9.0 kB)\n",
            "Collecting shortuuid>=0.5.0\n",
            "  Downloading shortuuid-1.0.9-py3-none-any.whl (9.4 kB)\n",
            "Requirement already satisfied: six>=1.13.0 in /usr/local/lib/python3.7/dist-packages (from wandb) (1.15.0)\n",
            "Requirement already satisfied: requests<3,>=2.0.0 in /usr/local/lib/python3.7/dist-packages (from wandb) (2.23.0)\n",
            "Collecting pathtools\n",
            "  Downloading pathtools-0.1.2.tar.gz (11 kB)\n",
            "Requirement already satisfied: Click!=8.0.0,>=7.0 in /usr/local/lib/python3.7/dist-packages (from wandb) (7.1.2)\n",
            "Requirement already satisfied: psutil>=5.0.0 in /usr/local/lib/python3.7/dist-packages (from wandb) (5.4.8)\n",
            "Collecting sentry-sdk>=1.0.0\n",
            "  Downloading sentry_sdk-1.10.1-py2.py3-none-any.whl (166 kB)\n",
            "\u001b[K     |████████████████████████████████| 166 kB 42.6 MB/s \n",
            "\u001b[?25hRequirement already satisfied: setuptools in /usr/local/lib/python3.7/dist-packages (from wandb) (57.4.0)\n",
            "Requirement already satisfied: promise<3,>=2.0 in /usr/local/lib/python3.7/dist-packages (from wandb) (2.3)\n",
            "Requirement already satisfied: PyYAML in /usr/local/lib/python3.7/dist-packages (from wandb) (6.0)\n",
            "Collecting setproctitle\n",
            "  Downloading setproctitle-1.3.2-cp37-cp37m-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_17_x86_64.manylinux2014_x86_64.whl (30 kB)\n",
            "Requirement already satisfied: protobuf!=4.0.*,!=4.21.0,<5,>=3.12.0 in /usr/local/lib/python3.7/dist-packages (from wandb) (3.17.3)\n",
            "Collecting GitPython>=1.0.0\n",
            "  Downloading GitPython-3.1.29-py3-none-any.whl (182 kB)\n",
            "\u001b[K     |████████████████████████████████| 182 kB 68.4 MB/s \n",
            "\u001b[?25hRequirement already satisfied: typing-extensions>=3.7.4.3 in /usr/local/lib/python3.7/dist-packages (from GitPython>=1.0.0->wandb) (4.1.1)\n",
            "Collecting gitdb<5,>=4.0.1\n",
            "  Downloading gitdb-4.0.9-py3-none-any.whl (63 kB)\n",
            "\u001b[K     |████████████████████████████████| 63 kB 2.2 MB/s \n",
            "\u001b[?25hCollecting smmap<6,>=3.0.1\n",
            "  Downloading smmap-5.0.0-py3-none-any.whl (24 kB)\n",
            "Requirement already satisfied: urllib3!=1.25.0,!=1.25.1,<1.26,>=1.21.1 in /usr/local/lib/python3.7/dist-packages (from requests<3,>=2.0.0->wandb) (1.24.3)\n",
            "Requirement already satisfied: chardet<4,>=3.0.2 in /usr/local/lib/python3.7/dist-packages (from requests<3,>=2.0.0->wandb) (3.0.4)\n",
            "Requirement already satisfied: idna<3,>=2.5 in /usr/local/lib/python3.7/dist-packages (from requests<3,>=2.0.0->wandb) (2.10)\n",
            "Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.7/dist-packages (from requests<3,>=2.0.0->wandb) (2022.9.24)\n",
            "Collecting sentry-sdk>=1.0.0\n",
            "  Downloading sentry_sdk-1.10.0-py2.py3-none-any.whl (166 kB)\n",
            "\u001b[K     |████████████████████████████████| 166 kB 75.5 MB/s \n",
            "\u001b[?25h  Downloading sentry_sdk-1.9.10-py2.py3-none-any.whl (162 kB)\n",
            "\u001b[K     |████████████████████████████████| 162 kB 73.5 MB/s \n",
            "\u001b[?25h  Downloading sentry_sdk-1.9.9-py2.py3-none-any.whl (162 kB)\n",
            "\u001b[K     |████████████████████████████████| 162 kB 74.8 MB/s \n",
            "\u001b[?25h  Downloading sentry_sdk-1.9.8-py2.py3-none-any.whl (158 kB)\n",
            "\u001b[K     |████████████████████████████████| 158 kB 73.7 MB/s \n",
            "\u001b[?25h  Downloading sentry_sdk-1.9.7-py2.py3-none-any.whl (157 kB)\n",
            "\u001b[K     |████████████████████████████████| 157 kB 74.8 MB/s \n",
            "\u001b[?25h  Downloading sentry_sdk-1.9.6-py2.py3-none-any.whl (157 kB)\n",
            "\u001b[K     |████████████████████████████████| 157 kB 63.1 MB/s \n",
            "\u001b[?25h  Downloading sentry_sdk-1.9.5-py2.py3-none-any.whl (157 kB)\n",
            "\u001b[K     |████████████████████████████████| 157 kB 71.8 MB/s \n",
            "\u001b[?25h  Downloading sentry_sdk-1.9.4-py2.py3-none-any.whl (157 kB)\n",
            "\u001b[K     |████████████████████████████████| 157 kB 74.6 MB/s \n",
            "\u001b[?25h  Downloading sentry_sdk-1.9.3-py2.py3-none-any.whl (157 kB)\n",
            "\u001b[K     |████████████████████████████████| 157 kB 78.7 MB/s \n",
            "\u001b[?25h  Downloading sentry_sdk-1.9.2-py2.py3-none-any.whl (157 kB)\n",
            "\u001b[K     |████████████████████████████████| 157 kB 73.9 MB/s \n",
            "\u001b[?25h  Downloading sentry_sdk-1.9.1-py2.py3-none-any.whl (157 kB)\n",
            "\u001b[K     |████████████████████████████████| 157 kB 79.2 MB/s \n",
            "\u001b[?25h  Downloading sentry_sdk-1.9.0-py2.py3-none-any.whl (156 kB)\n",
            "\u001b[K     |████████████████████████████████| 156 kB 76.8 MB/s \n",
            "\u001b[?25hBuilding wheels for collected packages: pathtools\n",
            "  Building wheel for pathtools (setup.py) ... \u001b[?25l\u001b[?25hdone\n",
            "  Created wheel for pathtools: filename=pathtools-0.1.2-py3-none-any.whl size=8806 sha256=879911700915e0b7298d423699c869b83b11f98e738e11544e0f6ed61bdbb586\n",
            "  Stored in directory: /root/.cache/pip/wheels/3e/31/09/fa59cef12cdcfecc627b3d24273699f390e71828921b2cbba2\n",
            "Successfully built pathtools\n",
            "Installing collected packages: smmap, gitdb, shortuuid, setproctitle, sentry-sdk, pathtools, GitPython, docker-pycreds, wandb\n",
            "Successfully installed GitPython-3.1.29 docker-pycreds-0.4.0 gitdb-4.0.9 pathtools-0.1.2 sentry-sdk-1.9.0 setproctitle-1.3.2 shortuuid-1.0.9 smmap-5.0.0 wandb-0.13.5\n",
            "Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/\n",
            "Collecting pytorch_lightning\n",
            "  Downloading pytorch_lightning-1.8.0.post1-py3-none-any.whl (796 kB)\n",
            "\u001b[K     |████████████████████████████████| 796 kB 13.8 MB/s \n",
            "\u001b[?25hCollecting torchmetrics\n",
            "  Downloading torchmetrics-0.10.2-py3-none-any.whl (529 kB)\n",
            "\u001b[K     |████████████████████████████████| 529 kB 61.4 MB/s \n",
            "\u001b[?25hCollecting lightning-lite==1.8.0.post1\n",
            "  Downloading lightning_lite-1.8.0.post1-py3-none-any.whl (136 kB)\n",
            "\u001b[K     |████████████████████████████████| 136 kB 60.8 MB/s \n",
            "\u001b[?25hRequirement already satisfied: tensorboard>=2.9.1 in /usr/local/lib/python3.7/dist-packages (from pytorch_lightning) (2.9.1)\n",
            "Requirement already satisfied: tqdm>=4.57.0 in /usr/local/lib/python3.7/dist-packages (from pytorch_lightning) (4.64.1)\n",
            "Requirement already satisfied: PyYAML>=5.4 in /usr/local/lib/python3.7/dist-packages (from pytorch_lightning) (6.0)\n",
            "Requirement already satisfied: numpy>=1.17.2 in /usr/local/lib/python3.7/dist-packages (from pytorch_lightning) (1.21.6)\n",
            "Requirement already satisfied: fsspec[http]>2021.06.0 in /usr/local/lib/python3.7/dist-packages (from pytorch_lightning) (2022.10.0)\n",
            "Collecting lightning-utilities==0.3.*\n",
            "  Downloading lightning_utilities-0.3.0-py3-none-any.whl (15 kB)\n",
            "Requirement already satisfied: packaging>=17.0 in /usr/local/lib/python3.7/dist-packages (from pytorch_lightning) (21.3)\n",
            "Requirement already satisfied: torch>=1.9.* in /usr/local/lib/python3.7/dist-packages (from pytorch_lightning) (1.12.1+cu113)\n",
            "Requirement already satisfied: typing-extensions>=4.0.0 in /usr/local/lib/python3.7/dist-packages (from pytorch_lightning) (4.1.1)\n",
            "Collecting fire\n",
            "  Downloading fire-0.4.0.tar.gz (87 kB)\n",
            "\u001b[K     |████████████████████████████████| 87 kB 7.1 MB/s \n",
            "\u001b[?25hRequirement already satisfied: requests in /usr/local/lib/python3.7/dist-packages (from fsspec[http]>2021.06.0->pytorch_lightning) (2.23.0)\n",
            "Requirement already satisfied: aiohttp!=4.0.0a0,!=4.0.0a1 in /usr/local/lib/python3.7/dist-packages (from fsspec[http]>2021.06.0->pytorch_lightning) (3.8.3)\n",
            "Requirement already satisfied: asynctest==0.13.0 in /usr/local/lib/python3.7/dist-packages (from aiohttp!=4.0.0a0,!=4.0.0a1->fsspec[http]>2021.06.0->pytorch_lightning) (0.13.0)\n",
            "Requirement already satisfied: attrs>=17.3.0 in /usr/local/lib/python3.7/dist-packages (from aiohttp!=4.0.0a0,!=4.0.0a1->fsspec[http]>2021.06.0->pytorch_lightning) (22.1.0)\n",
            "Requirement already satisfied: multidict<7.0,>=4.5 in /usr/local/lib/python3.7/dist-packages (from aiohttp!=4.0.0a0,!=4.0.0a1->fsspec[http]>2021.06.0->pytorch_lightning) (6.0.2)\n",
            "Requirement already satisfied: charset-normalizer<3.0,>=2.0 in /usr/local/lib/python3.7/dist-packages (from aiohttp!=4.0.0a0,!=4.0.0a1->fsspec[http]>2021.06.0->pytorch_lightning) (2.1.1)\n",
            "Requirement already satisfied: frozenlist>=1.1.1 in /usr/local/lib/python3.7/dist-packages (from aiohttp!=4.0.0a0,!=4.0.0a1->fsspec[http]>2021.06.0->pytorch_lightning) (1.3.1)\n",
            "Requirement already satisfied: async-timeout<5.0,>=4.0.0a3 in /usr/local/lib/python3.7/dist-packages (from aiohttp!=4.0.0a0,!=4.0.0a1->fsspec[http]>2021.06.0->pytorch_lightning) (4.0.2)\n",
            "Requirement already satisfied: yarl<2.0,>=1.0 in /usr/local/lib/python3.7/dist-packages (from aiohttp!=4.0.0a0,!=4.0.0a1->fsspec[http]>2021.06.0->pytorch_lightning) (1.8.1)\n",
            "Requirement already satisfied: aiosignal>=1.1.2 in /usr/local/lib/python3.7/dist-packages (from aiohttp!=4.0.0a0,!=4.0.0a1->fsspec[http]>2021.06.0->pytorch_lightning) (1.2.0)\n",
            "Requirement already satisfied: pyparsing!=3.0.5,>=2.0.2 in /usr/local/lib/python3.7/dist-packages (from packaging>=17.0->pytorch_lightning) (3.0.9)\n",
            "Requirement already satisfied: tensorboard-plugin-wit>=1.6.0 in /usr/local/lib/python3.7/dist-packages (from tensorboard>=2.9.1->pytorch_lightning) (1.8.1)\n",
            "Requirement already satisfied: wheel>=0.26 in /usr/local/lib/python3.7/dist-packages (from tensorboard>=2.9.1->pytorch_lightning) (0.37.1)\n",
            "Requirement already satisfied: google-auth<3,>=1.6.3 in /usr/local/lib/python3.7/dist-packages (from tensorboard>=2.9.1->pytorch_lightning) (1.35.0)\n",
            "Requirement already satisfied: google-auth-oauthlib<0.5,>=0.4.1 in /usr/local/lib/python3.7/dist-packages (from tensorboard>=2.9.1->pytorch_lightning) (0.4.6)\n",
            "Requirement already satisfied: absl-py>=0.4 in /usr/local/lib/python3.7/dist-packages (from tensorboard>=2.9.1->pytorch_lightning) (1.3.0)\n",
            "Requirement already satisfied: protobuf<3.20,>=3.9.2 in /usr/local/lib/python3.7/dist-packages (from tensorboard>=2.9.1->pytorch_lightning) (3.17.3)\n",
            "Requirement already satisfied: tensorboard-data-server<0.7.0,>=0.6.0 in /usr/local/lib/python3.7/dist-packages (from tensorboard>=2.9.1->pytorch_lightning) (0.6.1)\n",
            "Requirement already satisfied: werkzeug>=1.0.1 in /usr/local/lib/python3.7/dist-packages (from tensorboard>=2.9.1->pytorch_lightning) (1.0.1)\n",
            "Requirement already satisfied: setuptools>=41.0.0 in /usr/local/lib/python3.7/dist-packages (from tensorboard>=2.9.1->pytorch_lightning) (57.4.0)\n",
            "Requirement already satisfied: grpcio>=1.24.3 in /usr/local/lib/python3.7/dist-packages (from tensorboard>=2.9.1->pytorch_lightning) (1.50.0)\n",
            "Requirement already satisfied: markdown>=2.6.8 in /usr/local/lib/python3.7/dist-packages (from tensorboard>=2.9.1->pytorch_lightning) (3.4.1)\n",
            "Requirement already satisfied: pyasn1-modules>=0.2.1 in /usr/local/lib/python3.7/dist-packages (from google-auth<3,>=1.6.3->tensorboard>=2.9.1->pytorch_lightning) (0.2.8)\n",
            "Requirement already satisfied: cachetools<5.0,>=2.0.0 in /usr/local/lib/python3.7/dist-packages (from google-auth<3,>=1.6.3->tensorboard>=2.9.1->pytorch_lightning) (4.2.4)\n",
            "Requirement already satisfied: rsa<5,>=3.1.4 in /usr/local/lib/python3.7/dist-packages (from google-auth<3,>=1.6.3->tensorboard>=2.9.1->pytorch_lightning) (4.9)\n",
            "Requirement already satisfied: six>=1.9.0 in /usr/local/lib/python3.7/dist-packages (from google-auth<3,>=1.6.3->tensorboard>=2.9.1->pytorch_lightning) (1.15.0)\n",
            "Requirement already satisfied: requests-oauthlib>=0.7.0 in /usr/local/lib/python3.7/dist-packages (from google-auth-oauthlib<0.5,>=0.4.1->tensorboard>=2.9.1->pytorch_lightning) (1.3.1)\n",
            "Requirement already satisfied: importlib-metadata>=4.4 in /usr/local/lib/python3.7/dist-packages (from markdown>=2.6.8->tensorboard>=2.9.1->pytorch_lightning) (4.13.0)\n",
            "Requirement already satisfied: zipp>=0.5 in /usr/local/lib/python3.7/dist-packages (from importlib-metadata>=4.4->markdown>=2.6.8->tensorboard>=2.9.1->pytorch_lightning) (3.10.0)\n",
            "Requirement already satisfied: pyasn1<0.5.0,>=0.4.6 in /usr/local/lib/python3.7/dist-packages (from pyasn1-modules>=0.2.1->google-auth<3,>=1.6.3->tensorboard>=2.9.1->pytorch_lightning) (0.4.8)\n",
            "Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.7/dist-packages (from requests->fsspec[http]>2021.06.0->pytorch_lightning) (2022.9.24)\n",
            "Requirement already satisfied: urllib3!=1.25.0,!=1.25.1,<1.26,>=1.21.1 in /usr/local/lib/python3.7/dist-packages (from requests->fsspec[http]>2021.06.0->pytorch_lightning) (1.24.3)\n",
            "Requirement already satisfied: chardet<4,>=3.0.2 in /usr/local/lib/python3.7/dist-packages (from requests->fsspec[http]>2021.06.0->pytorch_lightning) (3.0.4)\n",
            "Requirement already satisfied: idna<3,>=2.5 in /usr/local/lib/python3.7/dist-packages (from requests->fsspec[http]>2021.06.0->pytorch_lightning) (2.10)\n",
            "Requirement already satisfied: oauthlib>=3.0.0 in /usr/local/lib/python3.7/dist-packages (from requests-oauthlib>=0.7.0->google-auth-oauthlib<0.5,>=0.4.1->tensorboard>=2.9.1->pytorch_lightning) (3.2.2)\n",
            "Requirement already satisfied: termcolor in /usr/local/lib/python3.7/dist-packages (from fire->lightning-utilities==0.3.*->pytorch_lightning) (2.0.1)\n",
            "Building wheels for collected packages: fire\n",
            "  Building wheel for fire (setup.py) ... \u001b[?25l\u001b[?25hdone\n",
            "  Created wheel for fire: filename=fire-0.4.0-py2.py3-none-any.whl size=115942 sha256=b3f7230645427c6ce3501a132497e4420a5cf3cb1dd9b6df43de74183ffa3bac\n",
            "  Stored in directory: /root/.cache/pip/wheels/8a/67/fb/2e8a12fa16661b9d5af1f654bd199366799740a85c64981226\n",
            "Successfully built fire\n",
            "Installing collected packages: fire, lightning-utilities, torchmetrics, lightning-lite, pytorch-lightning\n",
            "Successfully installed fire-0.4.0 lightning-lite-1.8.0.post1 lightning-utilities-0.3.0 pytorch-lightning-1.8.0.post1 torchmetrics-0.10.2\n"
          ]
        }
      ],
      "source": [
        "!pip install wandb\n",
        "!pip3 install pytorch_lightning torchmetrics"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 2,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 86
        },
        "id": "EWT3aFU9XmLJ",
        "outputId": "be2ba7e3-6d05-480a-c378-91f7fef9ab56"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "ERROR:wandb.jupyter:Failed to detect the name of this notebook, you can set it manually with the WANDB_NOTEBOOK_NAME environment variable to enable code saving.\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.Javascript object>"
            ],
            "application/javascript": [
              "\n",
              "        window._wandbApiKey = new Promise((resolve, reject) => {\n",
              "            function loadScript(url) {\n",
              "            return new Promise(function(resolve, reject) {\n",
              "                let newScript = document.createElement(\"script\");\n",
              "                newScript.onerror = reject;\n",
              "                newScript.onload = resolve;\n",
              "                document.body.appendChild(newScript);\n",
              "                newScript.src = url;\n",
              "            });\n",
              "            }\n",
              "            loadScript(\"https://cdn.jsdelivr.net/npm/postmate/build/postmate.min.js\").then(() => {\n",
              "            const iframe = document.createElement('iframe')\n",
              "            iframe.style.cssText = \"width:0;height:0;border:none\"\n",
              "            document.body.appendChild(iframe)\n",
              "            const handshake = new Postmate({\n",
              "                container: iframe,\n",
              "                url: 'https://wandb.ai/authorize'\n",
              "            });\n",
              "            const timeout = setTimeout(() => reject(\"Couldn't auto authenticate\"), 5000)\n",
              "            handshake.then(function(child) {\n",
              "                child.on('authorize', data => {\n",
              "                    clearTimeout(timeout)\n",
              "                    resolve(data)\n",
              "                });\n",
              "            });\n",
              "            })\n",
              "        });\n",
              "    "
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "\u001b[34m\u001b[1mwandb\u001b[0m: Appending key for api.wandb.ai to your netrc file: /root/.netrc\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "True"
            ]
          },
          "metadata": {},
          "execution_count": 2
        }
      ],
      "source": [
        "# Возможно ниже будет не очень работать WandbLogger с первого разу, перезапустите kernel тетрадки\n",
        "import wandb\n",
        "\n",
        "wandb.login()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 3,
      "metadata": {
        "id": "LKcSNj4tlRVK"
      },
      "outputs": [],
      "source": [
        "import math\n",
        "import os\n",
        "import random\n",
        "import sys\n",
        "\n",
        "import matplotlib.pyplot as plt\n",
        "import numpy as np\n",
        "import pytorch_lightning as pl\n",
        "import torch\n",
        "import torchvision\n",
        "import torchvision.transforms as transforms\n",
        "from PIL import Image\n",
        "from pytorch_lightning.loggers import WandbLogger\n",
        "from torch import nn\n",
        "from torch.nn import functional as F\n",
        "from torch.utils.data import DataLoader\n",
        "from torchmetrics.functional import accuracy\n",
        "from torchvision.datasets import ImageFolder\n",
        "from tqdm import tqdm\n",
        "\n",
        "from torchmetrics.functional import accuracy"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 4,
      "metadata": {
        "id": "47YPLjDL-Mtv"
      },
      "outputs": [],
      "source": [
        "def seed_everything(seed):\n",
        "  \n",
        "    # Фискирует максимум сидов.\n",
        "    # Это понадобится, чтобы сравнение оптимизаторов было корректным\n",
        "    random.seed(seed)\n",
        "    os.environ[\"PYTHONHASHSEED\"] = str(seed)\n",
        "    np.random.seed(seed)\n",
        "    torch.manual_seed(seed)\n",
        "    torch.cuda.manual_seed(seed)\n",
        "    torch.backends.cudnn.deterministic = True\n",
        "\n",
        "\n",
        "seed_everything(141)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 7,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "gVKdh063AzhH",
        "outputId": "914eee59-75ce-4560-e965-ebfdfd9bd6e4"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "--2022-11-08 14:52:31--  https://www.dropbox.com/s/33l8lp62rmvtx40/dataset.zip?dl=1\n",
            "Resolving www.dropbox.com (www.dropbox.com)... 162.125.66.18, 2620:100:6021:18::a27d:4112\n",
            "Connecting to www.dropbox.com (www.dropbox.com)|162.125.66.18|:443... connected.\n",
            "HTTP request sent, awaiting response... 302 Found\n",
            "Location: /s/dl/33l8lp62rmvtx40/dataset.zip [following]\n",
            "--2022-11-08 14:52:31--  https://www.dropbox.com/s/dl/33l8lp62rmvtx40/dataset.zip\n",
            "Reusing existing connection to www.dropbox.com:443.\n",
            "HTTP request sent, awaiting response... 302 Found\n",
            "Location: https://ucd607dc7693bd6e98abb2782848.dl.dropboxusercontent.com/cd/0/get/BwXm0uTtjGMiSKay-8l6UFngysP7eLIwztu5cA6lSzgAGrHrLhEsZPus_irCsTQEIXxYmcDBbKByBGDUOq3s8_BcZgJUOzpVJAavgk522PdtMa5132uuQwpzMYmQ6ZuNuAqgxZferARnxr4cXfjbtcTpZzpPXn9Mapw3WpaeQUz4XQ/file?dl=1# [following]\n",
            "--2022-11-08 14:52:32--  https://ucd607dc7693bd6e98abb2782848.dl.dropboxusercontent.com/cd/0/get/BwXm0uTtjGMiSKay-8l6UFngysP7eLIwztu5cA6lSzgAGrHrLhEsZPus_irCsTQEIXxYmcDBbKByBGDUOq3s8_BcZgJUOzpVJAavgk522PdtMa5132uuQwpzMYmQ6ZuNuAqgxZferARnxr4cXfjbtcTpZzpPXn9Mapw3WpaeQUz4XQ/file?dl=1\n",
            "Resolving ucd607dc7693bd6e98abb2782848.dl.dropboxusercontent.com (ucd607dc7693bd6e98abb2782848.dl.dropboxusercontent.com)... 162.125.65.15, 2620:100:601a:15::a27d:70f\n",
            "Connecting to ucd607dc7693bd6e98abb2782848.dl.dropboxusercontent.com (ucd607dc7693bd6e98abb2782848.dl.dropboxusercontent.com)|162.125.65.15|:443... connected.\n",
            "HTTP request sent, awaiting response... 200 OK\n",
            "Length: 220318689 (210M) [application/binary]\n",
            "Saving to: ‘dataset.zip’\n",
            "\n",
            "dataset.zip         100%[===================>] 210.11M  21.9MB/s    in 9.6s    \n",
            "\n",
            "2022-11-08 14:52:42 (21.8 MB/s) - ‘dataset.zip’ saved [220318689/220318689]\n",
            "\n"
          ]
        }
      ],
      "source": [
        "!wget https://www.dropbox.com/s/33l8lp62rmvtx40/dataset.zip?dl=1 -O dataset.zip && unzip -q dataset.zip"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "RytEDW0ylRVN"
      },
      "source": [
        "## Задание 0"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "2HZECedTvepi"
      },
      "source": [
        "### Что поможет сделать на 10 из 10 (одно задание - 5 баллов)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "dOioHGEiveso"
      },
      "source": [
        "1. Использовать все возможные методы оптимизации и эксперемнтировать с ними.\n",
        "2. Подбор learning rate. Пример из прошлого семинара как это делать: [Как найти lr](https://pytorch-lightning.readthedocs.io/en/1.4.5/advanced/lr_finder.html)\n",
        "\n",
        "```\n",
        "  trainer = pl.Trainer(accelerator=\"gpu\", max_epochs=2, auto_lr_find=True) \n",
        "\n",
        "  trainer.tune(module, train_dataloader, eval_dataloader)\n",
        "\n",
        "  trainer.fit(module, train_dataloader, eval_dataloader))\n",
        "```\n",
        "\n",
        "\n",
        "\n",
        "3. Аугментация данных. [Документация (полезная)](https://pytorch.org/vision/main/transforms.html), а также [библиотека albumentation](https://towardsdatascience.com/getting-started-with-albumentation-winning-deep-learning-image-augmentation-technique-in-pytorch-47aaba0ee3f8)\n",
        "4. Подбор архитектуры модели. \n",
        "5. Можно написать модель руками свою в YourNet, а можно импортировать не предобученную сетку известной архитектуры из модуля torchvision.models. Один из способов как можно сделать: \n",
        "\n",
        "  * `torchvision.models.resnet18(pretrained=False, num_classes=200).to(device)`\n",
        "  * Документация по возможным моделям и как их можно брать: [Документация (полезная)](https://pytorch.org/vision/stable/models.html)\n",
        "6. Правильно нормализовывать данные при создании, пример [тык, но тут и в целом гайд от и до](https://www.pluralsight.com/guides/image-classification-with-pytorch)\n",
        "7. Model Checkpointing. Сохраняйте свой прогресс (модели), чтобы когда что-то пойдет не так вы сможете начать с этого места или просто воспроизвести свои результаты модели, которые обучали. \n",
        " * Пример как можно с wandb тут: [Сохраняем лучшие модели в wandb](https://docs.wandb.ai/guides/integrations/lightning)\n",
        " * По простому можно так: [Сохраняем модели в pytorch дока](https://pytorch.org/tutorials/beginner/saving_loading_models.html)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "WYePsQgNRB-n"
      },
      "source": [
        "### Подготовка данных"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import PIL"
      ],
      "metadata": {
        "id": "9P8QU1hiugyP"
      },
      "execution_count": 5,
      "outputs": []
    },
    {
      "cell_type": "code",
      "execution_count": 6,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "QEdDQtHdlRVO",
        "outputId": "b50f2789-73c1-4d9c-a40c-5af6a3dfd2ce"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/torchvision/transforms/transforms.py:1298: UserWarning: The parameter 'resample' is deprecated since 0.12 and will be removed 0.14. Please use 'interpolation' instead.\n",
            "  \"The parameter 'resample' is deprecated since 0.12 and will be removed 0.14. \"\n",
            "/usr/local/lib/python3.7/dist-packages/torch/utils/data/dataloader.py:566: UserWarning: This DataLoader will create 4 worker processes in total. Our suggested max number of worker in current system is 2, which is smaller than what this DataLoader is going to create. Please be aware that excessive worker creation might get DataLoader running slow or even freeze, lower the worker number to avoid potential slowness/freeze if necessary.\n",
            "  cpuset_checked))\n"
          ]
        }
      ],
      "source": [
        "# YOU CAN DEFINE AUGMENTATIONS HERE\n",
        "seed_everything(141)\n",
        "train_transform = transforms.Compose([\n",
        "        transforms.ColorJitter(hue=.05, saturation=.05),\n",
        "        transforms.RandomHorizontalFlip(),\n",
        "        transforms.RandomRotation(20, resample=PIL.Image.BILINEAR),\n",
        "        transforms.ToTensor(),\n",
        "        transforms.Normalize((0.5, 0.5, 0.5), (0.5, 0.5, 0.5))\n",
        "    ])\n",
        "\n",
        "val_transform = transforms.Compose([\n",
        "       transforms.ToTensor(),\n",
        "        transforms.Normalize((0.5, 0.5, 0.5), (0.5, 0.5, 0.5))\n",
        "    ])\n",
        "\n",
        "train_dataset = ImageFolder('/content/dataset/dataset/train', transform=train_transform)\n",
        "val_dataset = ImageFolder('/content/dataset/dataset/val', transform=val_transform)\n",
        "\n",
        "train_dataloader = torch.utils.data.DataLoader(train_dataset, batch_size=32, shuffle = True, num_workers=4)\n",
        "val_dataloader = torch.utils.data.DataLoader(val_dataset, batch_size=32, shuffle = False, num_workers=4)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 7,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "mrg4Yj0VlRVP",
        "outputId": "9a34ff3c-4a82-4cee-f36e-9c179d8e273f"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "tests passed\n"
          ]
        }
      ],
      "source": [
        "# Just very simple sanity checks\n",
        "assert isinstance(train_dataset[0], tuple)\n",
        "assert len(train_dataset[0]) == 2\n",
        "assert isinstance(train_dataset[1][1], int)\n",
        "print(\"tests passed\")"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "EOuM0EEYj7Ml"
      },
      "source": [
        "### Посмотрим на картиночки"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 554
        },
        "id": "DeuB0YC3LYRm",
        "outputId": "fdde2343-53e9-4528-e0d4-45d094ec8840"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "WARNING:matplotlib.image:Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "WARNING:matplotlib.image:Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAAPsAAAD7CAYAAACscuKmAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADh0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uMy4yLjIsIGh0dHA6Ly9tYXRwbG90bGliLm9yZy+WH4yJAAAgAElEQVR4nO2dfXhV1ZX/vyuEGEKMMQUMiBhSQIaiImUoKtNSrJZaB6ettVrb8enQYaZjO9qXp7Uz05m+zk9n+tS+Tlt+Vmtf0fpSqdOxCMpU5KcUEREQYsCoEWLEGEPAGELW7497b853L3JPLnm5N+Gsz/PwsE72vufse+7d96y118sWVYXjOMc/RYUegOM4+cEnu+MkBJ/sjpMQfLI7TkLwye44CcEnu+MkhAFNdhFZIiK7RKReRK4frEE5jjP4SH/97CIyCkAdgAsBNAL4E4ArVXXH4A3PcZzBongAr50PoF5V9wCAiKwEcCmArJNdRKJfljGmsZPkI6bthCxtdvQd8QMeVITkk03bGyR3mzbWpQ7FtGmWvwPhvSszbQdIPpHk12OuZe8331d+n12mH99vew4ev70HzKgs1+rtesOR0SQfLtgoAlTV3kkAA5vspwJ4gY4bAbwt51fPNMd7SG4zbTUkt5I8zvTbnvPVBw7fuXebNn4vdkJXkLzZtPHE7cjydwCYTfJc07aO5EUkb4u5lr3fVSSXkrzf9OOf9XbTxuM/iOxUkmx/1F6OeV2hGGWO+TvYRPIwDEwdyGTPCRFZDmD5UF/HcZx4BjLZXwRwGh1PTv8tQFVXAFgBGDV+kunIT4l5po2fjqwR/G/ugx0UppPMTzz7ZOSnt33ibc3SDwBeynJd+2Tnp+EU0zaHZB5jlenHbfaJyurzoyTXmH48/kbTZtX6bPA57H0cjtjPjGfQMHyaMwNZjf8TgOkiMlVESgBcAWDV4AzLcZzBpt9PdlXtEpFPAvgDUpbMLaqaT6vZcZxjYEA2u6r+HsDvB2ksjuMMIf32s/frYmyzn20a+Wdnmml7kGR20b02OOPKylvNMdulbACVmH7sMbBeB14VN6vUVz00vkf+5b/ELEXzPVgUc23uZ9cOENPGq8q8PmBt6idizsn06ghKw18/u9Kdq90/GLCb0q6R8JqRdSPyPR7mrjcPl3WchOCT3XESQuHUeItV4Zhqko9y7g0hp5hjdo1NJLnT9JtA8vOmjVT3838SNj1yc5ZxVJpjNnlqTRu7zVilt6szzSQ3mbb9WfrZ98mf5ommja/H6r99vEzI0g8IA3OGWkXm8ZebNr4H+TQt4ogxeVyNd5yE45PdcRKCT3bHSQjDx2bnUNRnTNvpJLM9GZdgkSvW1uSssVNNG9vObA/XmH47Sf6IaeOohNmmbTXJHPZqbfbJJFs7mo9tEg7DLkB7v5kzSN4V08/CViN/6qNNP3ZzTUZ2OJx6mIelDoixJNusv7KYNvreus3uOAnHJ7vjJIQhT3HNmRqSrQvmOZLHkzwYavwV5vgXJNu7U08yF6gwrquPkRp/62XmHBwduNO0LY7EE2bQpWweOUfy2XvFajz/lNtzNCA3OF/bmgwceWcLh7Cayeq5rUHA47fRaZxhxpGIT+P4gouz1JBsP1u+p9ke0zFzwp/sjpMQfLI7TkIYPqvxcZxJMq/K5juaaSrJpEqP/mTY7TCXm7I/p1w0wiagZFvht+ozq3c2aYP7slr8iOnHquMbpo0jB7MV1LD8mTmuI5k/p5NMP1bV7XvhYzaprJehkInV2bwO/YUj42yCFX+X7L3KfNatgHb5arzjJBqf7I6TEHyyO05CGJ42+zvN4RWRIfPQ3w2Cof4ekv/HtHEEk3FjfGBXZOjetZgMXZslZSPeGHa92SKN2Qpi2OKcG0ieYdrYBcYZd8cS/cZw9OJzWXsdzTkk8zpCq+nHLsHzTJtdq8hgH1EcDfhq30MbMdjMNs4QzLZW0wRop9vsjpNofLI7TkIonBo/0WSg7DuA4cb5vwv1qEc+QyYE12u3kXYcUddi2ngHFxtBx2oaqbd/vjLstod2nJllilc8zIk2DZF4hkm6aSAX5kKzq8zav0VOvOV9kbz9npiO7MqbY9rYJJlg2tgtx9Fj1kxi0+CpmHGMNKaaY3al2nuVMdleAfSwq/GOk2h8sjtOQvDJ7jgJIc82e5FGPiUbo0nEFXocZL52IDRQv3Ti/40ObPGKJSSzW2iv6cdtZqfWC6gGfqPJRGOv2XO3RPKYpWG/1/l1xpV1EtmzZbSW0GrGyG2VZh+43Z/FMXP2+8wfyKZ8kjMJbdGFRSTHuSJ5jNbVya+z2Xf9dTkOd2wRECrI2e/iFSJyi4g0i8g2+luViDwgIs+k/7c7lDuOM8zIRY3/KcJnGgBcD2Ctqk4HsDZ97DjOMCYnNV5EagDcp6qz08e7ACxS1X0iMhHAOlU9I+YUmfNkvdgoimo7YpL230xRZ7tv63O4KawKThFHN275aI/8hbE/D/t9iGRbT522iD7z1kh+al3YbSy5sg5a1ZQLOViX3RaSuVa+UU1Hk0vqcIM5B5+T1P0TjYvuAKv/d5pzDHIU2uh3R3KF2drrlY10YLeVttF2GWw2GH9frFsu39t6DwMGuwbdKaq6Ly034Wgr23GcYcaAy1KpqsY9sUVkOYDlA72O4zgDo2Bq/KgPhW1Hbo/k6Z8K2/aTKvxqXKTWhZF4zb9ODJqauqI9fO56Z0wyDSd+nGXaOGqOVXybjMLRTbbQQgPJdodXirY7nc75/Lawm1KCy6VmpX4RJZN8egE12FVw1uliNowddOxSLt+DuG2ueAsmq+5zUshd/RzXccRgq/GrAFydlq8GcG8/z+M4Tp7IxfX2awD/D8AZItIoIssA3ADgQhF5BsC70seO4wxj+rTZVfXKLE0XDPJYHMcZQvIbQTdaNGOzjTfbIo0ju2vP1rBtIdmeG9ZH8hWm5nsJ2XI/troGF1zk4oizTD8uAlmave2kt0dyl9m26CC7jEzW21vJxn78Z2HbKZQR1kkRb//xmdAE++b10We26wdmjLyNFrneTr447PYqF+607kFem6D1grEXhd0O/g7HjvXb8L2zddJtZlcGa9vzesQf+jGm4wzf/slxEo5PdsdJCHnd/unE04AFX03JD3w8bHuZtj4KaqcB2Exq2uf+PpJ/YYo61JIaLCZiTPlnrYHkKWG/IMlio2mjyLXXqIBE4BYyTDTFGjpYZd4Utr1EauxE2iZpWnk4yEUzo2JwH741aMKC+ZGefMkVUQbRq0ZVP5lMoy6zJdMBNj1IlT5oXYx/SbJ17TF8Pps0xPfO1pzjyEH+/DaYfsfzrq6DiD/ZHSch+GR3nITgk91xEkLhCk7+uWnknx1jA1/9D5G8n8JUO4yNt/Z7OQ6E3T+2Jjtvy2zDZbkvZ6hZu5/Hv8C08flrwqaTyNX3fgp77TJ27lnkrqo0qy4/+1UkbyD32pT5YT92F75gt3Pm98mfiy0MkS2cFYDQPSmhQolvmExCofNrfdgW2PBs9z8JJwZ3vTlOwvHJ7jgJIb9qfJFoT1Ta6zEdzzTHVAt86jsi+dlHw27/+fv39sh7uyqCtobOSFdtK4lC3Nau/FN4ElaZbTQW1/2iml9fe+zHQbcHN6zpkR9a/ZvwHKwKx9Rcu+afIvksY2qUUCTfL1aEbWtpO6t/pnJ6jxpToJluT4NRzw9wJNs8kk1kY5CxtidsGkPFNzpJdT9iTIbTyLXXacYxiSLlWkiN329MhqBAyH9j5DGG5Lh5kSOuxjtOwvHJ7jgJIf+r8RkFI+6ytsABFytglW1R2G0MReG9Hpd0S9FeF/w23OJp/ZqosIVdOf7Oj77YI9ftaOiRf/D1X4cdeVun7ebaZAp88D/Cpgn00zufarXNNKv9baQK15kV7AVU/66CVPVWoz53kqq+10QsTiYV/HORRYI2o2YfovFWGFOjjVbqm2lV3dbyKOPP1jx6KsqjXXNbm6LS4wfNeE+lCMDa6rDt4fvoYCSq+P3A1XjHSTg+2R0nIfhkd5yEULgIumNgPG1H9DIVrwii2ACACkrA2G5BhBe7kMpMv90kv9O0PRSJo6+J5MP3mX5cXKE7bPrgv0TyYpNFNoWLZZCrqdbYw+PIzt24PmwrJlu5idYc2o3NznZ5tSkGMZu2d/4jjf/+dWG/jVTY4nlTpKOMIvRayGbvDj2i6OQoPPPoKacMxMqKyH4vKwpT7Io7o3WWrvagCR20NtFJCwa7jcsyiNYb5Lr5+cZtdsdJOD7ZHSch5FWNLx9fqrM/kNLvHvvx7j56984p/xbJL91sGrlghS2SUEMyu9RswQRWmW2CCLv9uD6aqUEHLlhxk2k7JxK/8tWwaS6NcRup52+fF/brIhdYu1FbZ5rtlTIcMvXdSuhn/pBRwTvpnrSRut9irlVB92CNKfSxh+rw3UPuuzeZoiKldA6bZxMkOpG6X2VMgWJ6L13Gt1fCu9XyDrdNoab78C00D57BiMbVeMdJOD7ZHSch+GR3nIRQMNfbOz59TtD2vzc9MfALcPaQqUuPW0j+DMn3m35ccNKW4+QwTQ5hNe6vIFPM1D4XskP//q/Ctrlk+y+l0N82E7bbRGsHpaa2/QRacygmt9khY8tW0fvsNsZyM613tJNrstmsYdRSzf0dJoR1wozIbLz5jug71mjG8Si576aYYiFddP9bOeTWjLeExlg1ITRXi4qi51lLa+Sim1sU7und3hotajz2pQMYyfTbZheR00TkIRHZISLbReTa9N+rROQBEXkm/b+NaHccZxiRixrfBeCzqjoLqSJL14jILADXA1irqtMBrE0fO44zTDlmNV5E7gXw/fS/Y9q2OS6C7qPfi4qQ//xT/dlXyGB3omP1kd1rJsINHA23yLRxFB5H6JnCDYELMGY7oh8+EB5PI9dQMY23xkTQtZA6XWxMDX47XRRoZl1SU8hkmGRMDa7zx6evawj7scmwzajxc6iG3oPkljtkzI5NdZG8ZnPYVsz17MnsaDGfWQc9skpNNGBJOSmcdLMWdNQE/erro/TBDmPz7L7pDYwkBsX1lt6n/RwAjwE4RVX3pZuacPQuXo7jDCNy3hFGRMqR2ur+OlVtE4l+PFRVsz21RWQ5gOUDHajjOAMjpye7iIxGaqL/UlXvTv/5pbT6jvT/vW6CpKorVHWeqs7rrd1xnPzQp80uqUf4bQBaVPU6+vt/AnhFVW8QkesBVKnq5/s4V3SxUaYx8org3Te+NWj6wxcejx1jTlxKMme92Z8gtgdtyC1v77wD2aFznGCy727+eiSXtoZtoOMysrfHGTuUQ2QrTVsR6WrjyObtNnuxlZX03g8A9pAdXU02drtxeVXS67bWZW/bSWsAU2aH/brKIg3xm7eE38Wt5GLkajdm6zt00z1oMmHBb9BnMboy+tLVNocLFXPOij7cHVtMZU26eU99Y/inxGWz2XNR488H8FEAT4lIJqn0nwDcAOAOEVkG4DkAlw/GQB3HGRr6nOyquh5Ar78UOHrN23GcYcqIKF5x6U8itf7eZYOg0p9PslWlOaPKuuW4LxV2PCo7jj03Rr298pOR/C6j0k4g1bqIzjHH9OOstG4zxr20clJl1HOmlH7ma2eGbe2kdpeTGt/cEPbbT/ejy5gJfM5icpu1m/HW070rMtls68hU2kzXbjWPqA6KoGsypkYTmTwddO3Z3VPDc1Bli2quDgKgoz16o498dh+GO5715jgJxye74ySEEaHGB/Cq+r1xFzPHWa58/sPh8SOf6b0fgLBIBau+G8Juo2l1+PLFYdtMWgSebFdMSC2+hOrpbTGRZRN4Idn8XLNqXUuFLOxq/CFSb2vM6jbXkefCEOW2Xh+fz0TotdGqeCm9rsKYFuX0Xmwdu/LJ0YdYR213rAk/zPWk7ptdv1BK1+NbUN4xMbxWRWSv7Nj2bNBWSePf9Y3w/DiRZL4HR1AwXI13nITjk91xEoJPdsdJCCPPZo+9AMn9vRLVir/A7Be39go6CM26rJz/6fD4w4siudMUpZhBtv4MsqPLTKbY82RTjzMZa91c8IHs92Lzs17NkX3Gnud685NqIrnZBERX0XjbjAtzBr2ukcbLteABYD+tHVSEHi800Dn3Ur9SkwW4hbIObeHLbrp3LWRTl1eHIZxdXZGRXVo6Omjb+3y0P/ezm8LzB9GYL2FY4Da74yQcn+yOkxByTnEdEbDqPsa0vZ7jOWiLp7VvG+B4AEwxbq12in6bZWqoTyOV/BCpsC1Gfa4kddcmp3TQMSfFlBq3Gddk7zLn4CfAIYrq6zLn6KK2bvPY4PfZacwEporO2dgYtnGyzjRyoVUZ04WjDU1NCpSQ2cBuye+tCn1j5y6J5Nb9h4O2/RwhaYp0BDULh4kanw1/sjtOQvDJ7jgJwSe74ySE/NrspYCkk4306SE4P9vp9meMk5xydJsNBmWmuEQL2Y07THjoDHKHcY32amOjsouq1di5bWS/VtC1i0rCfp1kp3cYm72Y+nbSfSw2LkDQcZGx53kcnG1mP5cKsnnLjPuO68HzyypM5lwNnaPT7LvHNebbaO3jVLNd9tsXRoUpbzynnwUquJi6PQV78w6jIPiT3XESgk92x0kI+VXjO4ZIfc9A7rW/eCCMgnr4QtKdzqQGU1wCXCLcFsdm1woHYMVkOI0zauUW2m7qCpMRdwfVrOdtmkuM+txFaqx1qfEux+zxslsmcUSdVfH5CcAqfknMt6XERMZ1kBrPbrkOo4JzcYxqU6+Pi3Q0czSgGUcVjX+WOUcTqe4byTR68Y6w3403xaju/H15Knu3QHW3OyjsinldnvAnu+MkBJ/sjpMQjq9EGOak8HDsVyP54LX9POebSH4lx9e8Nzz8yj9GclVn2MZ1HYqobYpZjS8htbXcFGvoIN19P6mwtlZdNa3olxk1ngtRdHIUnjEngnGYc7RlqU9Xah4vXO7NFsDg13EUm02m4eOymAIb69ZF8qVXZ+93FPxdes20sbW4gGRTFCWfeCKM4yQcn+yOkxB8sjtOQhh5Nnuc/dSf4hWnm+PncnxdnOuNI/lMtt1VP4nkGmMDc3HK5mgH4aOKV3RSIYdJdiskkrnIRadxvU0mF1WlsXOpTDq6ae2gxEbhUdskU1BiPxecpPHbaD22t9vasrfxe7bjYDefbZtMrk++H41nhR/8O0bn+sEb+rOOM8T022YXkVIR2SgiT4rIdhH5SvrvU0XkMRGpF5HbRaSkr3M5jlM4clHj3wCwWFXPBjAHwBIRWQDgRgA3qeo0pMIJlg3dMB3HGSjHpMaLSBmA9QA+AeC/AVSrapeInAvgy6r67j5enz+bwcLRcKQS4mDMa3ItgHGiOT5AcsxutV+6J2wqosSYv6FtMuu3mX4cQWfcUKzGt5NaXGRcbxWkulu3Gbvpyuhe2S2eOFlnyrSwjYtqjCMVf79J/immcVj3INNB78XuXMtqPIw7k5OIuDhG3ZQwwnLV76MIy9s+YS4eY5YNRwbkehORUekdXJsBPABgN4BWVc18/I0ATh2MgTqOMzTkNNlV9YiqzkFqT5T5CPdDiUVElovIJhGxdTkdx8kjx+R6U9VWpKq0nQugUkQy8VWTAbyY5TUrVHWeqs7rrd1xnPzQp80uIuMBHFbVVhEZA2A1UotzVwO4S1VXisiPAGxV1f/q41z5s9lPiGnjzLaTTRvb87bIAG8Pxjv3jjX92B22M/swTjgvPP73z0dyeUy4bAWFyFp3FRd35L3ZbKgru9RsMhtnoo2j+9HeHvarI1fWDKPrHSL7ewoVimgyxTOL6Fo2g49tbA79nWEKT0ym+2OfXkV0PzaTbtlo1hjKKqKFl7+sPRA2xtnpcQUrCkQ2mz2XFNeJAG4TkVFI3cs7VPU+EdkBYKWIfB3AEwB+EncSx3EKS5+TXVW3Ajinl7/vQcp+dxxnBDDyIujiiItqY7We1Xir8LBqbbYSCtR6duVZ3ZHVUftzSpFxMG6zr6yM5FpS1UuNO6mEjq1LrZSuxxlgtgAGF6+wUW2H6PwzuN6dqRHHkX1xW1Rx7fzNZvvpWlLJrectiAAkddxuZbVoUSQ37AnbuMYdv69xZgXpj/RZHzLmylUXYGhh1+2BrL1yxrPeHCfh+GR3nIRwfG3/FFMLLvhZYxXcRvQ/QvIHTNujWV5nSywXZ5EBgBNGTEQaF1conhPJtePCfhMogqzE/FzzcRHJdgumVlJVrXreThFpk8kUsOo+16RrNV4B9hhwxNtkU5OPaTHRdVVkQnCCS01N2I89Ejt2hG1/tZTaKBJxz/6w30Jafbr/wexj7Decd2PuY762jfInu+MkBJ/sjpMQfLI7TkI4vlxvjCk4GdjYbK/ZEV1I8gbTxgUF/0jyXNOPf0LtmgC70YytzH0/8deRfN6ssFsl2cpHLbqQbd4ds+0SR9RVmKKVvO1S595IttF6E2gtodXY25O4OAbZ7HZ9gItMFpt7NYEi46rofDtMFmANufYazZbK7IpbQJ/femM3c836zo5ww4BzTz12o/rEvwuPD7BL0K5b3HrMp4/FXW+Ok3B8sjtOQji+XG+MiU4LcvJOj+m3hmSTqAJWHznxw95FdsVZNZ6j6+xP7c7e22xRB1aFq4wKPi6Lu8pu/8TnaDGqdReZGnMpwq3LFsAg9dyOkXea5YQWdqcBoYrfaSIFOZJt428jmSPmAKCTTAFbT++iD/9Fj7xnfVTMfab5bLdQZN+UKcbX2Q/f2AFjToDugZwVNilvFTWE20T5k91xEoJPdsdJCD7ZHSchHL82u6mbM5ZKYR7cSg3GZQRyecG4eAJ7+zKSV5t+caG05BoTUzhRKZR2Atm29heZ7V6b9dZKbkXO8rJ144vok7eut3JyQ7XHFK+wrjiGi008Si7M2bPDfjNp7cNmm9XWRjKvRWxYH/bjopJVlaHX6adfJTudrtVsiop84GI6eHk7BowJT+YwaTXvE+xa7a/Nnsn4jAkZ9ye74yQEn+yOkxCOXzXecPAPdPAWkq2XpTmmbSHJdSTbbYLjIuh4m2Ojgk8iFbeYPpki85PMrqZuW3iCVERW3UvMGMeRCTHJRHRxZFwn12s3bjMe1jjTdojMIz5fpTUZyijUsTvcz4vV/29/K5LPM26zeo4oLApDIutIXf/Yv2Fo4RqFZluuIHKy0bSR2RR8N4/Fmrgk/f+67F38ye44CcEnu+MkhOM3ESZXpppjXj03K8dBtF2cus9tRr0dT8fdpqzyXFKnZ5Fq93YTcdVGySkTzIo+l1Wu4HEZk2EvqdkNJtqruSmSp9EqslXBOclkst3Fld4bn8/SRt4Da65cfnm0RVMp7XPVtDcM+WtujL5WVZVvCtrWrI62VmUT52u/yT6mfvPBSBxtPrPDf0R22Ixi75D18nBJa1sqPbMD8COAvuaJMI6TaHyyO05C8MnuOAkhMa63rDxrjjkjzt4dsi/HUt1xG/mlZFPbn9NqsntbjC1bRm65/eSeKTb23xR21RjXG9vHXFDCut64eMU04yaaQjYkv6xmSmgK7m+ObGW7vRRvCV1NEWL19WG/P1I04xQzjp11UaH+vXujvZUmTQi3W97bFPUrKQ0XUKbNjAZy5x0v9Mh/sSy81sODsZ8RrVscXmPa+HOya0H8/eHvRNy2U4vMccZFOhgRdOltm58QkfvSx1NF5DERqReR20XEepQdxxlGHIsafy2Ap+n4RgA3qeo0pLa0W9brqxzHGRbkpMaLyGQA7wXwDQCfERFBarH/w+kutwH4MoAfDsEY88tzkTj14rCpndxmh7iOnSm6wD+hdoPXRoromm0i19izt3QJXdfUOB9Hmuohc212X82j2ng7jfrMbrO5C8I23ml1GxV12Lk19Jy2cQEMY5Kw623pJVFYWH19GBb2uc+9uUd+9NHd4Tno/NvovnV1h9vrbqNa8YsvCrcfrKiKblBV9e09cnv5mxGyGwNlLLk9D9qiKOwiNZ9n8Mi1e2Axf0aycdseFanZC7k+2b8N4PM0lDcBaFXVTG5PI4BTczyX4zgFoM/JLiKXAGhW1cf7cwERWS4im0RkU9+9HccZKnJR488HsFRELkYqvqwCwHcAVIpIcfrpPhlHZZCnUNUVAFYAwzSCznESwjGFy4rIIgCfU9VLROQ3AO5S1ZUi8iMAW1X1v/p4/cie7GyAUyHGiQtCV1BFWVS5oKw7fMsNZF/OrA6a8H7KquOQ2CkmJHYm2fo1xl1VT9l436VP48s3hP24AOV6o3PxVs+L50VZaVs2h1lpnFXXZdYOyirG9MjlZdEiQ1dXWNWhoip6c6XGf9fRFaX3Ne2NDN3a2plBv0MdkcFaXxcas60t0cBaWqIUvq3l04J+/3PTIxgwl5Jsbe9DyA4/ctlt+5Tp91aSs2VTPg7ogcEPl/0CUot19UjZ8IPhqXQcZ4g4pqAaVV2HdMasqu4BMD+uv+M4wwePoDsWDpL8RCTuM66gItIQm02Nu8vJnTfNZMt1kUtmD0WWzVoU9vvpzZE8ZULYtpBMgR10jm0bw36tpILbWu68DdP+pkgNnjf3jKDfhvVRwbSS0jFB2913RuFfH/5IpJ5PmBTaLi28T3NpqGhu2RH5B2tmRDd10866oF95RXQTKiaFN2Tuwih87/2X/aBHfqFlCPZJZlPGFjThRD2r4vMs5HOMMv1sPUMmc+t6VeDDLo7jHOf4ZHechODFK4aAURTpVGlUr/Moqm2cMaImUF9egV99d9iP68ctMDvIUo2HQCOsNOr+8usi+ds/CtvWPxrJ86mcs9U+J1VHhSJW3vlK0MZbSj1PST03/+w9Qb/6hkglb+8Ma1OXlEU3qKgkkptbwn4XLVnaI9+/Jtx6t7sr0qc3bY6Wt+8arOVk3vB1Ecm2XDQnwtgy0wzXp7O7/LIDwZ4j89jeDuhBL17hOInGJ7vjJASf7I6TENz1NgQcoUTgyreGbfPIBu4w2U/15CqrooIPM2vCfpPIZff974Rt3428S9hC0XrTZoRRfqtWRYb/v3/r5aBt+SejaoZVnZHNu3nzq0G/jc9Hdvp1150ftP1qZRSR1kb266YtoQ9w8ZJF0fl3hG3FFdGzqHpKVBmiaO/eoN/K+3/eI9fOODNoq4oFDQIAAA0WSURBVKuL+g6anc7wZ2htbIZnmrW3s7neTORksGhiI/Iy6z0xq2L+ZHechOCT3XESgqvxQ8yCGeFxoKka98zSxZHcQrXc67aG/RYvj+RLLgjbNlJ98vkLI3W8bucbQb/iqkh1v/ii8Bz33xf1/ZulUXhdXRi4hgXnRR6eu+8OE0kuueTsHnnTtid75LLK8Cu3as1dPfK0s04L2g4hcrGt2RBVFVl4Uaiqd5RH+y5981th9siu2zG0cEJKnAoeF0HHj1xWz+054lx2GWsr5vHtT3bHSQg+2R0nIfhkd5yE4OGyQ4zdkuu734hk61IrInuNokgxydhudeRSW/37sO28RZE8e3509btXhzb7vMVRShVnlAFAw96GHnnJgqittSVcZCgujYrgr7g5tJXnL4xCaWtnRgsX5RPCdLD7N6ztketN0cpZFAo8aVpURGN/exgu+w//GH2tdAdCXsOxc4o5Zlt5FrLDBUStfW0LRDIcUk2hyphm+sWF3GaKmDwKaJuHyzpOovHJ7jgJwdX4PHPm+Eim4DEAQCtlPHE2W6lx1VRTBN22bWHbpJpI3knuuwpT7664KoqoW/nbsPjGxz8ZubJqyyKfUX1DuB/R5JpIVb/wo2HW2yeuovHSmM5aELrXNtdFWzIVmy2h60itX0XbKR3YE/YL3FWmEEcQ4fYqcmO8OeZzWNWay+FxMRKzDXbwWLUqONeYX5fl3EC4nbOlJv3/RlfjHSfx+GR3nITganwB+dTV4fFlS8/pkdetj4rcTTOqI6/GX3Z5WKjs+zdH23i+/7Lo73uMWtlJqmS12YaKuXN9JC9Z8pag7VB7dJLqKeFJDtHS8fPtkd7dXLwv6Pe9b9NBrpFlNgmkO4sMhKvgnD8Tt0PqVHPMXgJTBARU8w8NJMdt/2S24griWPk9t5l+bL4sNW2ZKMtnAX3d1XjHSTQ+2R0nIfhkd5yE4Db7MOVUKsPeZOzLIyT//HthWz3Z5jPIdbN1Z9hvE235tOhdYVs32b0L3/++HvnrX78n6PfQr5EbUfAbTv/rsOk5zgK0tdb5mO3aDtOPA/tsAQl2m7ENHGezTzTHfA6z3RZmk8xZbzaflN1tNpqObfEaku375PthXYCZiMudgB7q3WbPdX/2BgAHkPqedanqPBGpAnB7engNAC5X1Vw9mY7j5JljUePfqapzVHVe+vh6AGtVdTqAteljx3GGKTmp8ekn+zxV3U9/2wVgkaruE5GJANap6hnZzpF+javxSWd6eDiaCmcctpFx2VR365JqjWnjxxknnOzOPkSMMces8p9q2tgVZ1Vrht1+dgdWNmX4HHF14y0ZU2YboO0Dc70pgNUi8riIZOqknKKqGadpE47OFXIcZxiRa1mqhar6oohMAPCAiATLPaqq2Z7a6R+H5b21OY6TP3J6sqvqi+n/mwHcg9RWzS+l1Xek/+81Y1dVV6jqPLL1HccpAH0+2UVkLIAiVT2Qli8C8FUAqwBcDeCG9P/3DuVAneOEZ8LDw1yQ0z562E5n95rNGmMb2IapsjvMhtJmI84tZwpsBLY4vxfrRmTsGNmdx+O196MlSz8AMBmDvZGLGn8KgHtEJNP/V6p6v4j8CcAdIrIMwHMALs/hXI7jFIg+J7uq7gFwdi9/fwXABUe/wnGc4YjXjR+B3H77L3vkD33oqpieI4DNJJsa+1nVbqsGs8pso844w+w5DJwjMW3s9rPZcWxqNJo2noVsJlhXm832YzLvO8ZU8dh4x0kIPtkdJyH4ZHechOA2+whkxNvpDBeusRll7E5id5sNiWU3lLXnuQgkZ6/Fudf6C4e32nEwT5hjygoM3ostnhmX+Zex533LZsdxfLI7TkJwNd4ZPjxmjs8lmevem62ug+M4Nb6GZFPMI079zRl2jdnMNmt6MDx+drftNf3YrWbPl3nfvea7pfAnu+MkBJ/sjpMQXI0f4YwxxRRef7Ew4xgSOPqNcyZtdBpHnZWatmwJNFbN5pX/l3Ma3dHQSvoo03QkbusmvjZHEd5v+vGYD5q2c9An/mR3nITgk91xEoJPdsdJCG6zj3COKxvd8hGS2aW2yfSbQ7J1y3FE2iySx5l+HP12LDY7F6ck11uRiXA78mzMOXid4Xck2wTytSS/xbRlxh+TledPdsdJCD7ZHSchuBrvDBtOvDY8PsAqOKvZC8N+2JalHxC67GxEGhMX4RYHR7VRcYxua07EcR7Jd5G81nYktpvjM9P/W58f4U92x0kIPtkdJyH4ZHechOA2uzNsKDWPnsBmt7XimVqS7VYlbMNz8QpbzJGvXW3a4mznSSSTe63CzKxge+MPmXPcHnP+XHmq7y7+ZHechOCT3XESgqvxTmGh7UfKTcZaN6nTr/B2zvVhv6BWm62bzmp9dZa/A2EUm3WbjSXZZpvZLLs0JTFmx3RTa++Z3rvF8w5znLkHD2V/SU5PdhGpFJE7RWSniDwtIueKSJWIPCAiz6T/P7k/Y3YcJz/kqsZ/B8D9qjoTqd/ipwFcD2Ctqk5Hagnj+qEZouM4g4GoxhffEpGTAGwBUKvUWUR2AVikqvvSWzavU9Uz+jjXYFT6co4jrrntbT3ypuawCN1j6+iACzfYlXRecbdFIjiBhtV9uxsrP/bsNku8ir/BtLEngPTx0/427DaOEm+e+D/oH1eS3GDaMmbDdkAPaq+V6HJ5sk9FKg/oVhF5QkRuTm/dfIqqZqp+NyG126vjOMOUXCZ7MYC5AH6oqucgtUQRqOzpJ36vT20RWS4im0TEJiY6jpNHcpnsjQAaVTWjY92J1OR/Ka2+I/2/Xd8EAKjqClWdp6rzemt3HCc/9GmzA4CIPAzg46q6S0S+jMgZ8Yqq3iAi1wOoUtXP93Eet9mdgFPeSwfGJfVSthdZm3oyyWWmbRt6x241xRlxFaaNz2Fde1tJfo3kt5l+tiY+wxb27CzXBcJCm/bmZLLdjgCqvdvsufrZPwXglyJSAmAPgI8hpRXcISLLkEruuzzHczmOUwBymuyqugVhZnAGWzjHcZxhSk5q/KBdzNV4J473hIfT3xXJrRSp9vKD5nWUjDJ2Vth0kNVsXqGy20RxVJ6tKf88ydZlx25A3lLKnP8EUsGrYnZn3Ueuw7HG1Di4mg7mm3NkXrcJ0Lb+u94cxzkO8MnuOAnBJ7vjJAS32Z2RwUcj8Qzj99nFe6IZe3gs2coH2aa2+8VxyK2JGDmJ7PLXVoZtt66f3iPf+dMoXnaCGcetyyL59CvDtkZaB5i9IJKfjAurtXXjM+doBbTLbXbHSTQ+2R0nIeRbjX8ZqQCccQhziQrBcBgD4OOw+DhCjnUcp6vq+N4a8jrZey4qsqnQsfLDYQw+Dh9HPsfharzjJASf7I6TEAo12VcU6LrMcBgD4OOw+DhCBm0cBbHZHcfJP67GO05CyOtkF5ElIrJLROrTBS/ydd1bRKRZRLbR3/JeCltEThORh0Rkh4hsF5FrCzEWESkVkY0i8mR6HF9J/32qiDyW/nxuT9cvGHJEZFS6vuF9hRqHiDSIyFMisiVTQq1A35EhK9uet8kuIqMA/ACpRMZZAK4UkVnxrxo0fgpgiflbIUphdwH4rKrOArAAwDXpe5DvsbwBYLGqng1gDoAlIrIAwI0AblLVaUhtT7Ys5hyDybVIlSfPUKhxvFNV55CrqxDfkaEr266qefkH4FwAf6DjLwL4Yh6vXwNgGx3vAjAxLU8EsCtfY6Ex3AvgwkKOBalCTpuRKqS0H0Bxb5/XEF5/cvoLvBjAfUgVaSrEOBoAjDN/y+vnAuAkpLaHlKEYRz7V+FMBvEDHjem/FYqClsIWkRoA5yBVnSzvY0mrzluQSvt4AMBuAK2qmqlAnq/P59sAPo+outubCjQOBbBaRB4XkeXpv+X7cxnSsu2+QIf4UthDgYiUA7gLwHWq2laIsajqEVWdg9STdT6AmUN9TYuIXAKgWVUfz/e1e2Ghqs5Fysy8RkTezo15+lwGVLa9L/I52V8EcBodT07/rVDkVAp7sBGR0UhN9F+q6t2FHAsAqGorUtsBngugUkQyRZLy8fmcD2CpiDQAWImUKv+dAowDqvpi+v9mAPcg9QOY789lQGXb+yKfk/1PAKanV1pLAFwBYFUer29ZBeDqtHw1UvbzkCIiAuAnAJ5W1W8VaiwiMl5EKtPyGKTWDZ5GatJflq9xqOoXVXWyqtYg9X14UFWvyvc4RGSsiJyYkQFchFQh57x+LqraBOAFEclso3YBgB2DNo6hXvgwCw0XA6hDyj785zxe99cA9gE4jNSv5zKkbMO1SO3QtQapuvdDPY6FSKlgW5HaP29L+p7kdSwAzgLwRHoc2wD8a/rvtQA2IlV+8TcATsjjZ7QIwH2FGEf6ek+m/23PfDcL9B2ZA2BT+rP5LYCTB2scHkHnOAnBF+gcJyH4ZHechOCT3XESgk92x0kIPtkdJyH4ZHechOCT3XESgk92x0kI/x8vgzd6BUaVYQAAAABJRU5ErkJggg==\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ],
      "source": [
        "for batch in val_dataloader:\n",
        "    images, class_nums = batch\n",
        "    plt.imshow(images[5].permute(1, 2, 0))\n",
        "    plt.show()\n",
        "    plt.imshow(images[19].permute(1, 2, 0))\n",
        "    plt.show()\n",
        "    break"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "LCwKB-3nKm1-"
      },
      "source": [
        " Задание 1. \n",
        "\n",
        "5 баллов\n",
        "Добейтесь accuracy на валидации не менее 0.44. В этом задании запрещено пользоваться предобученными моделями и ресайзом картинок.\n",
        "\n",
        "\n",
        "Для того чтобы выбить скор (считается ниже) на 2.5/5 балла (то есть половину за задание) достаточно соблюдать пару простых жизненных правил:\n",
        "1. Аугментация (без нее сложно очень будет)\n",
        "2. Оптимайзеры можно (и нужно) использовать друг с другом. Однако когда что-то проверяете, то не меняйте несколько параметров сразу - собьете логику экспериментов\n",
        "3. Не используйте полносвязные модели или самые первые сверточные, используйте более современные архитектуры (что на лекциях встречались)\n",
        "4. Посмотреть все ноутбуки прошедших семинаров и слепить из них что-то общее. Семинарских тетрадок хватит сверх"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "pWR2l6ymZfRJ"
      },
      "source": [
        "### Модель (или просто импортируйте не предобученную)"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Далее я определял в отедльных ячейках модели и подставлял их в YourNet (переменная self.layer).\n",
        "Зафиксировал 3 лучших:"
      ],
      "metadata": {
        "id": "qmGPMqUXljdz"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#Стоит заметить, что начинал с шага 0,005 и 10 эпох (на самой последней модели изменю)\n",
        "#Изначально делал подобие нетолстой свёрточной сети, после Batchnorm лучше всех подошла функция Relu (пробовал LeakyRelu, Gelu и Softmax)\n",
        "#На model_1 наилучшее качество было 0,2645\n",
        "#Отчёт: https://wandb.ai/yaponsky_boh/lightning_logs/reports/Model_1--VmlldzoyOTM2MTU4?accessToken=4ypfw5qb1gqeesmh0zg1gym7r5szsmrn9g6mwvvkj81njc52gh4o3cm7r8uvrrk6\n",
        "seed_everything(141)\n",
        "model_1 = nn.Sequential(\n",
        "    nn.Conv2d(3, 32, kernel_size=3, padding=1), \n",
        "    nn.BatchNorm2d(32), \n",
        "    nn.ReLU(),\n",
        "    nn.Conv2d(32, 32, kernel_size=3, padding=1), \n",
        "    nn.BatchNorm2d(32),\n",
        "    nn.ReLU(),\n",
        "    nn.MaxPool2d(2, 2), \n",
        "    nn.Dropout(0.3),\n",
        "\n",
        "    nn.Conv2d(32, 64, kernel_size=3, padding=1), \n",
        "    nn.BatchNorm2d(64),\n",
        "    nn.ReLU(),\n",
        "    nn.Conv2d(64, 64, kernel_size=3, padding=1), \n",
        "    nn.BatchNorm2d(64),\n",
        "    nn.ReLU(),\n",
        "    nn.MaxPool2d(2, 2), \n",
        "    nn.Dropout(0.3),\n",
        "\n",
        "    nn.Conv2d(64, 128, kernel_size=3, padding=1), \n",
        "    nn.BatchNorm2d(128),\n",
        "    nn.ReLU(),\n",
        "    nn.Conv2d(128, 128, 3, padding=1), \n",
        "    nn.BatchNorm2d(128),\n",
        "    nn.ReLU(),\n",
        "    nn.MaxPool2d(2, 2), \n",
        "    nn.Dropout(0.3),\n",
        "\n",
        "    nn.Flatten(), \n",
        "    nn.Linear(128 * 8 * 8, 256), \n",
        "    nn.BatchNorm1d(256),\n",
        "    nn.ReLU(),\n",
        "    nn.Dropout(0.5),\n",
        "    nn.Linear(256,200)\n",
        ")"
      ],
      "metadata": {
        "id": "qrqJpaKd1IY8"
      },
      "execution_count": 7,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#Оставил Relu только в конце каждого слоя и убрал дропауты - качество полнялось до 0,2943\n",
        "#Отчёт: https://wandb.ai/yaponsky_boh/lightning_logs/reports/Model_2--VmlldzoyOTM2MTcy?accessToken=dl6zd1eb8tsw82d37i86qaryin7ecd9gj3b4fyw4p87f37ns0b1jws9cd30pq29b\n",
        "seed_everything(141)\n",
        "model_2 = nn.Sequential(\n",
        "        nn.Conv2d(3, 32, 3, padding=1),\n",
        "        nn.BatchNorm2d(32),\n",
        "        nn.Conv2d(32, 32, 3, padding=1),\n",
        "        nn.BatchNorm2d(32),\n",
        "        nn.MaxPool2d(3, stride=2),\n",
        "        nn.ReLU(),\n",
        "\n",
        "        nn.Conv2d(32, 64, 3, padding=1),\n",
        "        nn.BatchNorm2d(64),\n",
        "        nn.Conv2d(64, 64, 3, padding=1),\n",
        "        nn.BatchNorm2d(64),\n",
        "        nn.MaxPool2d(3, stride=2),\n",
        "        nn.ReLU(),\n",
        "\n",
        "        nn.Conv2d(64, 128, 3, padding=1),\n",
        "        nn.BatchNorm2d(128),\n",
        "        nn.Conv2d(128, 128, 3, padding=1),\n",
        "        nn.BatchNorm2d(128),\n",
        "        nn.MaxPool2d(3, stride=2),\n",
        "        nn.ReLU(),\n",
        "\n",
        "        nn.Flatten(),\n",
        "        nn.Linear(128*49, 256),\n",
        "        nn.BatchNorm1d(256),\n",
        "        nn.ReLU(),\n",
        "        nn.Linear(256,200)\n",
        "\n",
        "\n",
        ")"
      ],
      "metadata": {
        "id": "N6Jte_aLTxI7"
      },
      "execution_count": 8,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#Поднял число выходных каналов в первом слое до 64, а в последнем соответственно - до 256, а также добавил auto_lr_find - получил качество 0,393\n",
        "#Изменил шаг на 0,001 и RElu на LeakyRelu - 0.4168\n",
        "#Оптимизатор RAdam (другие ещё меньше) поднял качество лишь до 0,4173, поэтому решил оставить Adam\n",
        "#Поднял число эпох до 15 - получил 0,4242 - финальное качество\n",
        "#Отчёт по финальной версии модели: https://wandb.ai/yaponsky_boh/lightning_logs/reports/Model_3--VmlldzoyOTM2MTgw?accessToken=2cct898u3sg2jihvwqg4f8jzk3yzc53ujz8ox7e11sub9c8o1x0dwuacxaetisac\n",
        "seed_everything(141)\n",
        "model_3 = nn.Sequential(\n",
        "        nn.Conv2d(3, 64, 3, padding=1),\n",
        "        nn.BatchNorm2d(64),\n",
        "        nn.LeakyReLU(),\n",
        "        nn.Conv2d(64, 64, 3, padding=1),\n",
        "        nn.BatchNorm2d(64),\n",
        "        nn.LeakyReLU(),\n",
        "        nn.MaxPool2d(3, stride=2),\n",
        "        nn.LeakyReLU(),\n",
        "\n",
        "        nn.Conv2d(64, 128, 3, padding=1),\n",
        "        nn.BatchNorm2d(128),\n",
        "        nn.LeakyReLU(),\n",
        "        nn.Conv2d(128, 128, 3, padding=1),\n",
        "        nn.BatchNorm2d(128),\n",
        "        nn.LeakyReLU(),\n",
        "        nn.MaxPool2d(3, stride=2),\n",
        "        nn.LeakyReLU(),\n",
        "\n",
        "        nn.Conv2d(128, 256, 3, padding=1),\n",
        "        nn.BatchNorm2d(256),\n",
        "        nn.LeakyReLU(),\n",
        "        nn.Conv2d(256, 256, 3, padding=1),\n",
        "        nn.BatchNorm2d(256),\n",
        "        nn.LeakyReLU(),\n",
        "        nn.MaxPool2d(3, stride=2),\n",
        "        nn.LeakyReLU(),\n",
        "\n",
        "        nn.Flatten(),\n",
        "        nn.Linear(256*49, 256),\n",
        "        nn.BatchNorm1d(256),\n",
        "        nn.LeakyReLU(),\n",
        "        nn.Linear(256,200)\n",
        "\n",
        "\n",
        ")"
      ],
      "metadata": {
        "id": "TxTds4vQnzGz"
      },
      "execution_count": 9,
      "outputs": []
    },
    {
      "cell_type": "code",
      "execution_count": 10,
      "metadata": {
        "id": "mDYorQXLZhTQ"
      },
      "outputs": [],
      "source": [
        "seed_everything(141)\n",
        "class YourNet(torch.nn.Module):\n",
        "    def __init__(self):\n",
        "        super().__init__()\n",
        "        self.layer = model_3 #Сюда подставляю модели\n",
        "        # --------------\n",
        "        self.loss_func = torch.nn.CrossEntropyLoss()\n",
        "        self.targets = torch.Tensor()\n",
        "        self.preds = torch.Tensor()\n",
        "        \n",
        "\n",
        "    def _forward(self, x):\n",
        "        x = self.layer(x)\n",
        "        return x\n",
        "        \n",
        "\n",
        "    def forward(self, images, target=None):\n",
        "        output = self._forward(images)\n",
        "        if target is not None:\n",
        "            loss = self.loss_func(output, target)\n",
        "\n",
        "            self.targets = torch.cat((self.targets.cuda(), target.cuda()), 0)\n",
        "            pred = torch.argmax(output, dim=-1)\n",
        "            self.preds = torch.cat((self.preds.cuda(), pred.cuda()), 0)\n",
        "            self.accuracy = accuracy(self.preds.long(), self.targets.long())\n",
        "        return loss\n",
        "\n",
        "    def get_accuracy(self, reset=False):\n",
        "        if reset:\n",
        "          self.targets = torch.Tensor()\n",
        "          self.preds = torch.Tensor()\n",
        "        return self.accuracy\n",
        "        "
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "f7iHXWj1alM1"
      },
      "source": [
        "### Тренировочный класс lightning"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 11,
      "metadata": {
        "id": "lD76TeZ1apua"
      },
      "outputs": [],
      "source": [
        "seed_everything(141)\n",
        "class YourModule(pl.LightningModule):\n",
        "    def __init__(self, model, learning_rate):\n",
        "        super().__init__()\n",
        "        self.model = model\n",
        "        self.learning_rate = learning_rate\n",
        "\n",
        "    def forward(self, x):\n",
        "        result = self.model(x)\n",
        "        return result\n",
        "\n",
        "    def configure_optimizers(self):\n",
        "        optimizer = torch.optim.Adam(self.parameters(), lr=self.learning_rate)\n",
        "        return optimizer\n",
        "\n",
        "    def training_step(self, train_batch, batch_idx):\n",
        "        images, target = train_batch\n",
        "        loss = self.model(images, target)\n",
        "        self.log(\"train_loss\", loss, prog_bar=True)  \n",
        "        return loss\n",
        "\n",
        "    def validation_step(self, val_batch, batch_idx):\n",
        "        images, target = val_batch\n",
        "        loss = self.model(images, target)\n",
        "        self.log(\"val_loss\", loss, prog_bar=True)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 12,
      "metadata": {
        "id": "C_nRPtYv-m4A"
      },
      "outputs": [],
      "source": [
        "LR = 0.001"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 13,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 69
        },
        "id": "z9-1wq7QYkiz",
        "outputId": "a1ebb79c-ec27-46f7-bb3e-6dc419d1e2b8"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ],
            "text/html": [
              "Tracking run with wandb version 0.13.5"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ],
            "text/html": [
              "Run data is saved locally in <code>./wandb/run-20221108_084212-20nbenat</code>"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ],
            "text/html": [
              "Syncing run <strong><a href=\"https://wandb.ai/yaponsky_boh/lightning_logs/runs/20nbenat\" target=\"_blank\">breezy-violet-33</a></strong> to <a href=\"https://wandb.ai/yaponsky_boh/lightning_logs\" target=\"_blank\">Weights & Biases</a> (<a href=\"https://wandb.me/run\" target=\"_blank\">docs</a>)<br/>"
            ]
          },
          "metadata": {}
        }
      ],
      "source": [
        "seed_everything(141)\n",
        "wandb_logger = WandbLogger(log_model='all') # какие возможности дает с pytorch_lightning https://docs.wandb.ai/guides/integrations/lightning\n",
        "device = torch.device(\"cuda\") if torch.cuda.is_available() else torch.device(\"cpu\")\n",
        "\n",
        "model = YourNet().to(device) \n",
        "module = YourModule(model, learning_rate=LR) "
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 14,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 364,
          "referenced_widgets": [
            "cfbe6aadc48448eba443e7dc2544d09a",
            "75f3fb3722b049f1909ca5b09335c61d",
            "98e78af20d7f4908962aa7a8dac2480c",
            "d159907143c5455b96fd0cb416fb3d1a",
            "9e17022334a643aca61074e5ba0fbc64",
            "9e9896492dcb45e180ae679cbb7525b0",
            "94d3f88355b14b9cb8586d20b3a11a81",
            "046710c133cd4ea89ef7c8b7aa8cacd0",
            "a9d471cce9ea4c0bbcc98f779d4642dd",
            "4fae5dd480c4493a84c9613194c16f0a",
            "640d7d8b8577415580835bac24394ebf",
            "c72e8a5b6c88431399fee89aec7e71cb",
            "a27de058cb1a45bab8ee4d3dbbb5159f",
            "c51dc898deaa4a5fbea95e5ecf855f67",
            "bc1d08d98b464803b094397a205c43d2",
            "ef54b5ffb5864612901bbfc4de95a287",
            "7f7f86f4d1204581bd869cf6cdeb1bbc",
            "cb5f6e2d166245cd930e4e8fe25151e3",
            "f043228d60fc42c0836afc6ef6832b1b",
            "885f30521438428e9a3dab88286faf9a",
            "cd652f2a23df45a1b760c8039dd80f95",
            "fd3fce825dc343689b1810cd3788f42b",
            "567b90101693430693c13f43a4c9fe3f",
            "234bd50f3bea4a988409755726d5b06d",
            "e86da66101bc49449062d59983d2b7f3",
            "c9df42905f63484c877c8a9a8e72d5cf",
            "f3073e0d6ddd499983259cf72c1cc3d8",
            "355e66b80227426bb8ae03476f3fdaf2",
            "1591b56ac5a2454fa64229f64fe46d1f",
            "1a557b554af04baf85913014c5c4c839",
            "4de1b821a0574c2cbf93a5810a4ead50",
            "fde0ccfa5d814f62b5ce7771b9849f32",
            "806e6e6e7d954d7f932e5559f04152ce"
          ]
        },
        "id": "If8fi4HZkN3J",
        "outputId": "3e365e8e-51b4-4d84-cc75-7259ef7f031a"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "INFO:pytorch_lightning.utilities.rank_zero:GPU available: True (cuda), used: True\n",
            "INFO:pytorch_lightning.utilities.rank_zero:TPU available: False, using: 0 TPU cores\n",
            "INFO:pytorch_lightning.utilities.rank_zero:IPU available: False, using: 0 IPUs\n",
            "INFO:pytorch_lightning.utilities.rank_zero:HPU available: False, using: 0 HPUs\n",
            "INFO:pytorch_lightning.accelerators.cuda:LOCAL_RANK: 0 - CUDA_VISIBLE_DEVICES: [0]\n",
            "INFO:pytorch_lightning.callbacks.model_summary:\n",
            "  | Name  | Type    | Params\n",
            "----------------------------------\n",
            "0 | model | YourNet | 4.4 M \n",
            "----------------------------------\n",
            "4.4 M     Trainable params\n",
            "0         Non-trainable params\n",
            "4.4 M     Total params\n",
            "17.643    Total estimated model params size (MB)\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "Sanity Checking: 0it [00:00, ?it/s]"
            ],
            "application/vnd.jupyter.widget-view+json": {
              "version_major": 2,
              "version_minor": 0,
              "model_id": "cfbe6aadc48448eba443e7dc2544d09a"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/torch/utils/data/dataloader.py:566: UserWarning: This DataLoader will create 4 worker processes in total. Our suggested max number of worker in current system is 2, which is smaller than what this DataLoader is going to create. Please be aware that excessive worker creation might get DataLoader running slow or even freeze, lower the worker number to avoid potential slowness/freeze if necessary.\n",
            "  cpuset_checked))\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "Training: 0it [00:00, ?it/s]"
            ],
            "application/vnd.jupyter.widget-view+json": {
              "version_major": 2,
              "version_minor": 0,
              "model_id": "c72e8a5b6c88431399fee89aec7e71cb"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "Validation: 0it [00:00, ?it/s]"
            ],
            "application/vnd.jupyter.widget-view+json": {
              "version_major": 2,
              "version_minor": 0,
              "model_id": "567b90101693430693c13f43a4c9fe3f"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "INFO:pytorch_lightning.utilities.rank_zero:`Trainer.fit` stopped: `max_epochs=1` reached.\n"
          ]
        }
      ],
      "source": [
        "seed_everything(141)\n",
        "trainer = pl.Trainer(accelerator = 'gpu', max_epochs=15, auto_lr_find=True, logger=wandb_logger) \n",
        "trainer.fit(module, train_dataloader, val_dataloader) "
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "3eoTAB1fSOuk"
      },
      "source": [
        "### Валидация результатов задания"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.metrics import accuracy_score\n",
        "def evaluate_task(model, test_dataloader, device=\"cuda:0\"):\n",
        "    model = model.to(device)\n",
        "    predicted_classes = torch.Tensor([]).to(device)\n",
        "    true_classes = torch.Tensor([]).to(device)\n",
        "\n",
        "    model.eval()\n",
        "    with torch.no_grad():\n",
        "        for images, labels in tqdm(test_dataloader):\n",
        "            images, labels = images.to(device), labels.to(device)\n",
        "\n",
        "            pred = model._forward(images)\n",
        "            pred_classes = torch.argmax(pred, dim=-1)\n",
        "\n",
        "            predicted_classes = torch.cat((predicted_classes, pred_classes), 0)\n",
        "            true_classes = torch.cat((true_classes, labels), 0)\n",
        "\n",
        "    return accuracy_score(predicted_classes.cpu().detach().numpy(), true_classes.cpu().detach().numpy())"
      ],
      "metadata": {
        "id": "ZJqejqnBu2m6"
      },
      "execution_count": 16,
      "outputs": []
    },
    {
      "cell_type": "code",
      "execution_count": 17,
      "metadata": {
        "id": "TsP57VG8KEfP",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "28410826-3b86-4a82-98e7-cd4ef07b7083"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "\r  0%|          | 0/313 [00:00<?, ?it/s]/usr/local/lib/python3.7/dist-packages/torch/utils/data/dataloader.py:566: UserWarning: This DataLoader will create 4 worker processes in total. Our suggested max number of worker in current system is 2, which is smaller than what this DataLoader is going to create. Please be aware that excessive worker creation might get DataLoader running slow or even freeze, lower the worker number to avoid potential slowness/freeze if necessary.\n",
            "  cpuset_checked))\n",
            "100%|██████████| 313/313 [00:05<00:00, 53.59it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Accuracy: 0.1888\n",
            "Оценка за это задание составит 4.29 баллов\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "\n"
          ]
        }
      ],
      "source": [
        "seed_everything(141)\n",
        "accurac = evaluate_task(model, val_dataloader)\n",
        "print(f'Accuracy: {accurac}')\n",
        "print(f\"Оценка за это задание составит {np.clip(10 * accurac / 0.44, 0, 10):.2f} баллов\")"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "cZqSdlQQKukS"
      },
      "source": [
        "## Задание 2\n",
        "\n",
        "5 баллов\n",
        "Добейтесь accuracy на валидации не менее 0.84. В этом задании делать ресайз и использовать претрейн можно.\n",
        "\n",
        "Для того чтобы выбить скор (считается ниже) на 2.5/5 балла (то есть половину за задание) достаточно соблюдать пару простых жизненных правил:\n",
        "1. Аугментация (без нее сложно очень будет)\n",
        "2. Оптимайзеры можно (и нужно) использовать друг с другом. Однако когда что-то проверяете, то не меняйте несколько параметров сразу - собьете логику экспериментов\n",
        "3. Не используйте полносвязные модели или самые первые сверточные, используйте более современные архитектуры (что на лекциях встречались или можете пойти дальше).\n",
        "4. Попробуйте сначала посмотреть качество исходной модели без дообучения, сохраните как baseline. Отсюда поймете какие слои нужно дообучать.\n",
        "5. Посмотреть все ноутбуки прошедших семинаров и слепить из них что-то общее. Семинарских тетрадок хватит сверх"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "zDzXM5rNxNQp"
      },
      "source": [
        "### Модель (или просто импортируйте предобученную)"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Аугментации оставил прежние, только добавил ресайз 200x200\n",
        "seed_everything(141)\n",
        "train_transform = transforms.Compose([\n",
        "        transforms.Resize((200,200)),\n",
        "        transforms.ColorJitter(hue=.05, saturation=.05),\n",
        "        transforms.RandomHorizontalFlip(),\n",
        "        transforms.RandomRotation(20, resample=PIL.Image.BILINEAR),\n",
        "        transforms.ToTensor(),\n",
        "        transforms.Normalize((0.5, 0.5, 0.5), (0.5, 0.5, 0.5))\n",
        "    ])\n",
        "\n",
        "val_transform = transforms.Compose([\n",
        "       transforms.Resize((200,200)),\n",
        "       transforms.ToTensor(),\n",
        "        transforms.Normalize((0.5, 0.5, 0.5), (0.5, 0.5, 0.5))\n",
        "    ])\n",
        "\n",
        "train_dataset = ImageFolder('/content/dataset/dataset/train', transform=train_transform)\n",
        "val_dataset = ImageFolder('/content/dataset/dataset/val', transform=val_transform)\n",
        "\n",
        "train_dataloader = torch.utils.data.DataLoader(train_dataset, batch_size=32, shuffle = True, num_workers=4)\n",
        "val_dataloader = torch.utils.data.DataLoader(val_dataset, batch_size=32, shuffle = False, num_workers=4)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "MEKZ9GEZTOfp",
        "outputId": "cc7f34f8-5793-47dd-ef6d-2c127d7dd087"
      },
      "execution_count": 8,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/torch/utils/data/dataloader.py:566: UserWarning: This DataLoader will create 4 worker processes in total. Our suggested max number of worker in current system is 2, which is smaller than what this DataLoader is going to create. Please be aware that excessive worker creation might get DataLoader running slow or even freeze, lower the worker number to avoid potential slowness/freeze if necessary.\n",
            "  cpuset_checked))\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from torchvision.models import convnext_base\n",
        "model = convnext_base(weights = 'DEFAULT')"
      ],
      "metadata": {
        "id": "fI42Iq2ZDMrz",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 66,
          "referenced_widgets": [
            "b643ad7d04ad4bd89c931b17469c5a5c",
            "d8ab733e62f04bc49ac11a745ec776dc",
            "ca4ab65205844a9e99709a8df7cf848e",
            "211006f0887847e4ab968d551b4e0478",
            "673b1c17d6b846d691066761be2f3866",
            "afe5b788959e43f4a0db5cecc248c551",
            "f0c410de9c4642fb984cc847c253d06b",
            "b3d6e3edc2fc4952a4c8b4bcc85788d0",
            "f829a4c3c27e455d97fff1b08c258ad0",
            "cef5d0b8a689440d89fa886700a6a1a2",
            "f5d508757ff84858b9959f88665ff0ab"
          ]
        },
        "outputId": "ec4785d9-94c3-4709-d5b8-0fef345637c3"
      },
      "execution_count": 9,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Downloading: \"https://download.pytorch.org/models/convnext_large-ea097f82.pth\" to /root/.cache/torch/hub/checkpoints/convnext_large-ea097f82.pth\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "  0%|          | 0.00/755M [00:00<?, ?B/s]"
            ],
            "application/vnd.jupyter.widget-view+json": {
              "version_major": 2,
              "version_minor": 0,
              "model_id": "b643ad7d04ad4bd89c931b17469c5a5c"
            }
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Flwqk0YjxPLE"
      },
      "source": [
        "### Тренировочный класс lightning"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 12,
      "metadata": {
        "id": "UnKHluO6xID4"
      },
      "outputs": [],
      "source": [
        "seed_everything(141)\n",
        "class skynet(pl.LightningModule):\n",
        "    def __init__(self, model, pretrained):\n",
        "        super().__init__()\n",
        "        self.pretrained=pretrained\n",
        "        if pretrained:\n",
        "            self.model = convnext_base(pretrained=True)\n",
        "            self.model.fc = nn.Identity()\n",
        "            self.classifier = nn.Linear(1000, 200)\n",
        "            self.optimizer = torch.optim.Adam(self.classifier.parameters(), lr = 0.001)\n",
        "        else:\n",
        "            self.model = convnext_base(pretrained=False)\n",
        "            self.optimizer = torch.optim.Adam(self.model.parameters())\n",
        "\n",
        "        self.loss = nn.CrossEntropyLoss()\n",
        "    def forward(self, x):\n",
        "        if self.pretrained:\n",
        "            with torch.no_grad():\n",
        "                features = self.model(x)\n",
        "            preds = self.classifier(features)\n",
        "        else:\n",
        "            preds = self.model(x)\n",
        "        return preds\n",
        "\n",
        "    def configure_optimizers(self):\n",
        "        return self.optimizer\n",
        "\n",
        "    def training_step(self, train_batch, batch_idx):\n",
        "        images, target = train_batch\n",
        "        preds = self.forward(images)\n",
        "        loss = self.loss(preds, target)\n",
        "        self.log(\"train_loss\", loss, prog_bar=True)\n",
        "        return loss\n",
        "\n",
        "    def validation_step(self, val_batch, batch_idx):\n",
        "        images, target = val_batch\n",
        "        preds = self.forward(images)\n",
        "        loss = self.loss(preds, target)\n",
        "        acc = accuracy(torch.argmax(preds, dim=-1).long(), target.long())\n",
        "        self.log(\"val_loss\", loss, prog_bar=True)\n",
        "        self.log(\"accuracy\", acc, prog_bar=True)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 13,
      "metadata": {
        "id": "lQAjkvkVyhEg",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "262c8c6a-d733-4fdc-c306-3017f19f94b2"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/pytorch_lightning/loggers/wandb.py:388: UserWarning: There is a wandb run already in progress and newly created instances of `WandbLogger` will reuse this run. If this is not desired, call `wandb.finish()` before instantiating `WandbLogger`.\n",
            "  \"There is a wandb run already in progress and newly created instances of `WandbLogger` will reuse\"\n",
            "/usr/local/lib/python3.7/dist-packages/torchvision/models/_utils.py:209: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and will be removed in 0.15, please use 'weights' instead.\n",
            "  f\"The parameter '{pretrained_param}' is deprecated since 0.13 and will be removed in 0.15, \"\n",
            "/usr/local/lib/python3.7/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and will be removed in 0.15. The current behavior is equivalent to passing `weights=ConvNeXt_Large_Weights.IMAGENET1K_V1`. You can also use `weights=ConvNeXt_Large_Weights.DEFAULT` to get the most up-to-date weights.\n",
            "  warnings.warn(msg)\n"
          ]
        }
      ],
      "source": [
        "seed_everything(141)\n",
        "wandb_logger = WandbLogger(log_model='all') # какие возможности дает с pytorch_lightning https://docs.wandb.ai/guides/integrations/lightning\n",
        "device =  torch.device(\"cuda\") if torch.cuda.is_available() else torch.device(\"cpu\")\n",
        "\n",
        "shelby = skynet(model,pretrained=True)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 14,
      "metadata": {
        "id": "T4wJgB1YyhG0",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 416,
          "referenced_widgets": [
            "8656511b1384444f89bfc0443bbb9eab",
            "61d7ebcb414143869e71a1c30bd3fbf3",
            "d5d33dd89df1490b966fb67934b60986",
            "ef05c42673d345cf934c662ae9657cf6",
            "9ad0497e705a48308a7e506b51ddd0ce",
            "2d360e90c4654a2c86ef9e75e7eee019",
            "912018c5fdab4a06882d2a8fe0519789",
            "37a40d08c0bb429cb11dae0447d4e69f",
            "36540d37c2be47a18ca03e9b74e98216",
            "8b3e37dc7f694ff39944ba6ede660219",
            "acbfb678a5be4e18ac5037a37f134606",
            "210e63aa2b74497587c4fc7313b9e804",
            "de801f1f5f994583976f18aebee955f0",
            "b3c1ce7ef2ff41f98f66603d47a56009",
            "0d0bf89f013748c5bdafb7ca7f51cda3",
            "8d7c2f5c1c324ebe935de154e45aea3c",
            "fc3245864905403ebb222642cc673679",
            "851f93d54b9e4082a718a119607876bd",
            "c5774eb385d2434981fa71f5b2bf3470",
            "a88818f56eb94873a5e699ffdb6f20f1",
            "aca8e9e9193646df9cead76e29e24bb9",
            "74cd741545bf4521b2f4bea14b008507",
            "0f6876e825044aedbba24612af4dd544",
            "74ea8439b8dc40708039ab99f75ac128",
            "be5426327bfc4e39ac9826be03dbf1fb",
            "b4d4b06abd3b4c40b7a36a123c9b3744",
            "56d43dd4919043ad8b19747e8bded24b",
            "59b372d89afe4d0bac3b41704b9f8bcf",
            "94b74ea8f9fa417b8f4c6b1b5b608c6f",
            "23cc387faad94c45ae7dc5a096235435",
            "088125110f874319a34facdd2436aea7",
            "4638b01f11e248b59a8528bee3a2061a",
            "f82dbad454194c17be55a8e298dd2a38"
          ]
        },
        "outputId": "ce7e3526-8782-4a00-b6f5-838d3b8db099"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "INFO:pytorch_lightning.utilities.rank_zero:GPU available: True (cuda), used: True\n",
            "INFO:pytorch_lightning.utilities.rank_zero:TPU available: False, using: 0 TPU cores\n",
            "INFO:pytorch_lightning.utilities.rank_zero:IPU available: False, using: 0 IPUs\n",
            "INFO:pytorch_lightning.utilities.rank_zero:HPU available: False, using: 0 HPUs\n",
            "INFO:pytorch_lightning.accelerators.cuda:LOCAL_RANK: 0 - CUDA_VISIBLE_DEVICES: [0]\n",
            "INFO:pytorch_lightning.callbacks.model_summary:\n",
            "  | Name       | Type             | Params\n",
            "------------------------------------------------\n",
            "0 | model      | ConvNeXt         | 197 M \n",
            "1 | classifier | Linear           | 200 K \n",
            "2 | loss       | CrossEntropyLoss | 0     \n",
            "------------------------------------------------\n",
            "197 M     Trainable params\n",
            "0         Non-trainable params\n",
            "197 M     Total params\n",
            "791.870   Total estimated model params size (MB)\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "Sanity Checking: 0it [00:00, ?it/s]"
            ],
            "application/vnd.jupyter.widget-view+json": {
              "version_major": 2,
              "version_minor": 0,
              "model_id": "8656511b1384444f89bfc0443bbb9eab"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/torch/utils/data/dataloader.py:566: UserWarning: This DataLoader will create 4 worker processes in total. Our suggested max number of worker in current system is 2, which is smaller than what this DataLoader is going to create. Please be aware that excessive worker creation might get DataLoader running slow or even freeze, lower the worker number to avoid potential slowness/freeze if necessary.\n",
            "  cpuset_checked))\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "Training: 0it [00:00, ?it/s]"
            ],
            "application/vnd.jupyter.widget-view+json": {
              "version_major": 2,
              "version_minor": 0,
              "model_id": "210e63aa2b74497587c4fc7313b9e804"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "Validation: 0it [00:00, ?it/s]"
            ],
            "application/vnd.jupyter.widget-view+json": {
              "version_major": 2,
              "version_minor": 0,
              "model_id": "0f6876e825044aedbba24612af4dd544"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/pytorch_lightning/trainer/call.py:48: UserWarning: Detected KeyboardInterrupt, attempting graceful shutdown...\n",
            "  rank_zero_warn(\"Detected KeyboardInterrupt, attempting graceful shutdown...\")\n"
          ]
        }
      ],
      "source": [
        "seed_everything(141)\n",
        "trainer = pl.Trainer(accelerator = 'gpu', max_epochs=5, logger=wandb_logger)  # YOUR CODE HERE\n",
        "trainer.fit(shelby, train_dataloader, val_dataloader)  # YOUR CODE HERE"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "2 эпохи - 0,827\n",
        "3 - 0,821\n",
        "4 - \n",
        "5 - "
      ],
      "metadata": {
        "id": "ifpZ0x-z3URT"
      }
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "u5D2bwOKSHVp"
      },
      "source": [
        "### Валидация результатов задания"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.metrics import accuracy_score\n",
        "def evaluate_task(model, test_dataloader, device=\"cuda:0\"):\n",
        "    model = model.to(device)\n",
        "    predicted_classes = torch.Tensor([]).to(device)\n",
        "    true_classes = torch.Tensor([]).to(device)\n",
        "\n",
        "    model.eval()\n",
        "    with torch.no_grad():\n",
        "        for images, labels in tqdm(test_dataloader):\n",
        "            images, labels = images.to(device), labels.to(device)\n",
        "\n",
        "            pred = model.forward(images)\n",
        "            pred_classes = torch.argmax(pred, dim=-1)\n",
        "\n",
        "            predicted_classes = torch.cat((predicted_classes, pred_classes), 0)\n",
        "            true_classes = torch.cat((true_classes, labels), 0)\n",
        "\n",
        "    return accuracy_score(predicted_classes.cpu().detach().numpy(), true_classes.cpu().detach().numpy())"
      ],
      "metadata": {
        "id": "ySCCbDfsX8H8"
      },
      "execution_count": 15,
      "outputs": []
    },
    {
      "cell_type": "code",
      "execution_count": 16,
      "metadata": {
        "id": "PEdwJE5uOrIM",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "outputId": "43fb0e88-d6d3-4aad-d348-ef24f03f817e"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "\n",
            "  0%|          | 0/313 [00:00<?, ?it/s]\u001b[A/usr/local/lib/python3.7/dist-packages/torch/utils/data/dataloader.py:566: UserWarning: This DataLoader will create 4 worker processes in total. Our suggested max number of worker in current system is 2, which is smaller than what this DataLoader is going to create. Please be aware that excessive worker creation might get DataLoader running slow or even freeze, lower the worker number to avoid potential slowness/freeze if necessary.\n",
            "  cpuset_checked))\n",
            "\n",
            "  0%|          | 1/313 [00:01<08:05,  1.56s/it]\u001b[A\n",
            "  1%|          | 2/313 [00:02<06:03,  1.17s/it]\u001b[A\n",
            "  1%|          | 3/313 [00:03<05:25,  1.05s/it]\u001b[A\n",
            "  1%|▏         | 4/313 [00:04<05:09,  1.00s/it]\u001b[A\n",
            "  2%|▏         | 5/313 [00:05<05:05,  1.01it/s]\u001b[A\n",
            "  2%|▏         | 6/313 [00:06<04:59,  1.02it/s]\u001b[A\n",
            "  2%|▏         | 7/313 [00:07<05:46,  1.13s/it]\u001b[A\n",
            "  3%|▎         | 8/313 [00:08<05:52,  1.15s/it]\u001b[A\n",
            "  3%|▎         | 9/313 [00:09<05:23,  1.07s/it]\u001b[A\n",
            "  3%|▎         | 10/313 [00:10<05:07,  1.02s/it]\u001b[A\n",
            "  4%|▎         | 11/313 [00:11<04:56,  1.02it/s]\u001b[A\n",
            "  4%|▍         | 12/313 [00:12<04:48,  1.04it/s]\u001b[A\n",
            "  4%|▍         | 13/313 [00:13<04:43,  1.06it/s]\u001b[A\n",
            "  4%|▍         | 14/313 [00:14<04:39,  1.07it/s]\u001b[A\n",
            "  5%|▍         | 15/313 [00:16<06:05,  1.23s/it]\u001b[A\n",
            "  5%|▌         | 16/313 [00:17<05:49,  1.18s/it]\u001b[A\n",
            "  5%|▌         | 17/313 [00:18<05:34,  1.13s/it]\u001b[A\n",
            "  6%|▌         | 18/313 [00:19<06:02,  1.23s/it]\u001b[A\n",
            "  6%|▌         | 19/313 [00:20<05:31,  1.13s/it]\u001b[A\n",
            "  6%|▋         | 20/313 [00:21<05:27,  1.12s/it]\u001b[A\n",
            "  7%|▋         | 21/313 [00:22<05:26,  1.12s/it]\u001b[A\n",
            "  7%|▋         | 22/313 [00:23<05:11,  1.07s/it]\u001b[A\n",
            "  7%|▋         | 23/313 [00:24<04:55,  1.02s/it]\u001b[A\n",
            "  8%|▊         | 24/313 [00:25<04:44,  1.01it/s]\u001b[A\n",
            "  8%|▊         | 25/313 [00:26<04:37,  1.04it/s]\u001b[A\n",
            "  8%|▊         | 26/313 [00:27<05:04,  1.06s/it]\u001b[A\n",
            "  9%|▊         | 27/313 [00:28<04:48,  1.01s/it]\u001b[A\n",
            "  9%|▉         | 28/313 [00:29<04:42,  1.01it/s]\u001b[A\n",
            "  9%|▉         | 29/313 [00:30<04:46,  1.01s/it]\u001b[A\n",
            " 10%|▉         | 30/313 [00:31<04:37,  1.02it/s]\u001b[A\n",
            " 10%|▉         | 31/313 [00:32<04:35,  1.03it/s]\u001b[A\n",
            " 10%|█         | 32/313 [00:33<04:28,  1.05it/s]\u001b[A\n",
            " 11%|█         | 33/313 [00:34<04:23,  1.06it/s]\u001b[A\n",
            " 11%|█         | 34/313 [00:35<04:20,  1.07it/s]\u001b[A\n",
            " 11%|█         | 35/313 [00:36<04:31,  1.02it/s]\u001b[A\n",
            " 12%|█▏        | 36/313 [00:37<04:24,  1.05it/s]\u001b[A\n",
            " 12%|█▏        | 37/313 [00:38<04:20,  1.06it/s]\u001b[A\n",
            " 12%|█▏        | 38/313 [00:39<04:16,  1.07it/s]\u001b[A\n",
            " 12%|█▏        | 39/313 [00:40<04:22,  1.04it/s]\u001b[A\n",
            " 13%|█▎        | 40/313 [00:41<05:00,  1.10s/it]\u001b[A\n",
            " 13%|█▎        | 41/313 [00:42<04:45,  1.05s/it]\u001b[A\n",
            " 13%|█▎        | 42/313 [00:43<04:34,  1.01s/it]\u001b[A\n",
            " 14%|█▎        | 43/313 [00:44<04:24,  1.02it/s]\u001b[A\n",
            " 14%|█▍        | 44/313 [00:45<04:17,  1.04it/s]\u001b[A\n",
            " 14%|█▍        | 45/313 [00:46<04:13,  1.06it/s]\u001b[A\n",
            " 15%|█▍        | 46/313 [00:47<04:09,  1.07it/s]\u001b[A\n",
            " 15%|█▌        | 47/313 [00:47<04:06,  1.08it/s]\u001b[A\n",
            " 15%|█▌        | 48/313 [00:48<04:04,  1.09it/s]\u001b[A\n",
            " 16%|█▌        | 49/313 [00:49<04:02,  1.09it/s]\u001b[A\n",
            " 16%|█▌        | 50/313 [00:50<04:00,  1.09it/s]\u001b[A\n",
            " 16%|█▋        | 51/313 [00:51<03:59,  1.09it/s]\u001b[A\n",
            " 17%|█▋        | 52/313 [00:52<03:58,  1.09it/s]\u001b[A\n",
            " 17%|█▋        | 53/313 [00:53<03:57,  1.10it/s]\u001b[A\n",
            " 17%|█▋        | 54/313 [00:54<04:21,  1.01s/it]\u001b[A\n",
            " 18%|█▊        | 55/313 [00:55<04:12,  1.02it/s]\u001b[A\n",
            " 18%|█▊        | 56/313 [00:56<04:06,  1.04it/s]\u001b[A\n",
            " 18%|█▊        | 57/313 [00:57<04:01,  1.06it/s]\u001b[A\n",
            " 19%|█▊        | 58/313 [00:58<03:58,  1.07it/s]\u001b[A\n",
            " 19%|█▉        | 59/313 [00:59<03:55,  1.08it/s]\u001b[A\n",
            " 19%|█▉        | 60/313 [01:00<03:53,  1.08it/s]\u001b[A\n",
            " 19%|█▉        | 61/313 [01:01<03:51,  1.09it/s]\u001b[A\n",
            " 20%|█▉        | 62/313 [01:01<03:49,  1.09it/s]\u001b[A\n",
            " 20%|██        | 63/313 [01:02<03:47,  1.10it/s]\u001b[A\n",
            " 20%|██        | 64/313 [01:03<03:46,  1.10it/s]\u001b[A\n",
            " 21%|██        | 65/313 [01:04<03:46,  1.10it/s]\u001b[A\n",
            " 21%|██        | 66/313 [01:05<03:45,  1.10it/s]\u001b[A\n",
            " 21%|██▏       | 67/313 [01:06<03:44,  1.10it/s]\u001b[A\n",
            " 22%|██▏       | 68/313 [01:07<03:43,  1.10it/s]\u001b[A\n",
            " 22%|██▏       | 69/313 [01:08<03:42,  1.10it/s]\u001b[A\n",
            " 22%|██▏       | 70/313 [01:09<03:41,  1.10it/s]\u001b[A\n",
            " 23%|██▎       | 71/313 [01:10<03:40,  1.10it/s]\u001b[A\n",
            " 23%|██▎       | 72/313 [01:11<03:39,  1.10it/s]\u001b[A\n",
            " 23%|██▎       | 73/313 [01:11<03:37,  1.10it/s]\u001b[A\n",
            " 24%|██▎       | 74/313 [01:12<03:37,  1.10it/s]\u001b[A\n",
            " 24%|██▍       | 75/313 [01:13<03:36,  1.10it/s]\u001b[A\n",
            " 24%|██▍       | 76/313 [01:14<03:35,  1.10it/s]\u001b[A\n",
            " 25%|██▍       | 77/313 [01:15<03:37,  1.08it/s]\u001b[A\n",
            " 25%|██▍       | 78/313 [01:16<03:36,  1.08it/s]\u001b[A\n",
            " 25%|██▌       | 79/313 [01:17<03:35,  1.08it/s]\u001b[A\n",
            " 26%|██▌       | 80/313 [01:18<03:36,  1.08it/s]\u001b[A\n",
            " 26%|██▌       | 81/313 [01:19<03:31,  1.10it/s]\u001b[A\n",
            " 26%|██▌       | 82/313 [01:20<03:30,  1.10it/s]\u001b[A\n",
            " 27%|██▋       | 83/313 [01:21<03:29,  1.10it/s]\u001b[A\n",
            " 27%|██▋       | 84/313 [01:21<03:28,  1.10it/s]\u001b[A\n",
            " 27%|██▋       | 85/313 [01:22<03:27,  1.10it/s]\u001b[A\n",
            " 27%|██▋       | 86/313 [01:23<03:26,  1.10it/s]\u001b[A\n",
            " 28%|██▊       | 87/313 [01:24<03:24,  1.10it/s]\u001b[A\n",
            " 28%|██▊       | 88/313 [01:25<03:24,  1.10it/s]\u001b[A\n",
            " 28%|██▊       | 89/313 [01:26<03:23,  1.10it/s]\u001b[A\n",
            " 29%|██▉       | 90/313 [01:27<03:21,  1.10it/s]\u001b[A\n",
            " 29%|██▉       | 91/313 [01:28<03:21,  1.10it/s]\u001b[A\n",
            " 29%|██▉       | 92/313 [01:29<03:20,  1.10it/s]\u001b[A\n",
            " 30%|██▉       | 93/313 [01:30<03:19,  1.10it/s]\u001b[A\n",
            " 30%|███       | 94/313 [01:31<03:18,  1.10it/s]\u001b[A\n",
            " 30%|███       | 95/313 [01:32<03:32,  1.03it/s]\n"
          ]
        },
        {
          "output_type": "error",
          "ename": "KeyboardInterrupt",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-16-cd7d0653257c>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;31m#model = # Подгрузить свою сохраненную модель сюда\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0mseed_everything\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m141\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 3\u001b[0;31m \u001b[0maccur\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mevaluate_task\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mshelby\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mval_dataloader\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      4\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34mf'Accuracy: {accur}'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34mf\"Оценка за это задание составит {np.clip(10 * (accur - 0.5) / 0.34, 0, 10):.2f} баллов\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m<ipython-input-15-f096bb48aaab>\u001b[0m in \u001b[0;36mevaluate_task\u001b[0;34m(model, test_dataloader, device)\u001b[0m\n\u001b[1;32m     10\u001b[0m             \u001b[0mimages\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlabels\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mimages\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mto\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdevice\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlabels\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mto\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdevice\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     11\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 12\u001b[0;31m             \u001b[0mpred\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mmodel\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mforward\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mimages\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     13\u001b[0m             \u001b[0mpred_classes\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtorch\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0margmax\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mpred\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdim\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m-\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     14\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m<ipython-input-12-d72f1ba88990>\u001b[0m in \u001b[0;36mforward\u001b[0;34m(self, x)\u001b[0m\n\u001b[1;32m     17\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpretrained\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     18\u001b[0m             \u001b[0;32mwith\u001b[0m \u001b[0mtorch\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mno_grad\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 19\u001b[0;31m                 \u001b[0mfeatures\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmodel\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     20\u001b[0m             \u001b[0mpreds\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mclassifier\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfeatures\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     21\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.7/dist-packages/torch/nn/modules/module.py\u001b[0m in \u001b[0;36m_call_impl\u001b[0;34m(self, *input, **kwargs)\u001b[0m\n\u001b[1;32m   1128\u001b[0m         if not (self._backward_hooks or self._forward_hooks or self._forward_pre_hooks or _global_backward_hooks\n\u001b[1;32m   1129\u001b[0m                 or _global_forward_hooks or _global_forward_pre_hooks):\n\u001b[0;32m-> 1130\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mforward_call\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0minput\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1131\u001b[0m         \u001b[0;31m# Do not call functions when jit is used\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1132\u001b[0m         \u001b[0mfull_backward_hooks\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mnon_full_backward_hooks\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.7/dist-packages/torchvision/models/convnext.py\u001b[0m in \u001b[0;36mforward\u001b[0;34m(self, x)\u001b[0m\n\u001b[1;32m    174\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    175\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mforward\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mx\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mTensor\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m->\u001b[0m \u001b[0mTensor\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 176\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_forward_impl\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    177\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    178\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.7/dist-packages/torchvision/models/convnext.py\u001b[0m in \u001b[0;36m_forward_impl\u001b[0;34m(self, x)\u001b[0m\n\u001b[1;32m    168\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    169\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m_forward_impl\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mx\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mTensor\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m->\u001b[0m \u001b[0mTensor\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 170\u001b[0;31m         \u001b[0mx\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfeatures\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    171\u001b[0m         \u001b[0mx\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mavgpool\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    172\u001b[0m         \u001b[0mx\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mclassifier\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.7/dist-packages/torch/nn/modules/module.py\u001b[0m in \u001b[0;36m_call_impl\u001b[0;34m(self, *input, **kwargs)\u001b[0m\n\u001b[1;32m   1128\u001b[0m         if not (self._backward_hooks or self._forward_hooks or self._forward_pre_hooks or _global_backward_hooks\n\u001b[1;32m   1129\u001b[0m                 or _global_forward_hooks or _global_forward_pre_hooks):\n\u001b[0;32m-> 1130\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mforward_call\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0minput\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1131\u001b[0m         \u001b[0;31m# Do not call functions when jit is used\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1132\u001b[0m         \u001b[0mfull_backward_hooks\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mnon_full_backward_hooks\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.7/dist-packages/torch/nn/modules/container.py\u001b[0m in \u001b[0;36mforward\u001b[0;34m(self, input)\u001b[0m\n\u001b[1;32m    137\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mforward\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0minput\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    138\u001b[0m         \u001b[0;32mfor\u001b[0m \u001b[0mmodule\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 139\u001b[0;31m             \u001b[0minput\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mmodule\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0minput\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    140\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0minput\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    141\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.7/dist-packages/torch/nn/modules/module.py\u001b[0m in \u001b[0;36m_call_impl\u001b[0;34m(self, *input, **kwargs)\u001b[0m\n\u001b[1;32m   1128\u001b[0m         if not (self._backward_hooks or self._forward_hooks or self._forward_pre_hooks or _global_backward_hooks\n\u001b[1;32m   1129\u001b[0m                 or _global_forward_hooks or _global_forward_pre_hooks):\n\u001b[0;32m-> 1130\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mforward_call\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0minput\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1131\u001b[0m         \u001b[0;31m# Do not call functions when jit is used\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1132\u001b[0m         \u001b[0mfull_backward_hooks\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mnon_full_backward_hooks\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.7/dist-packages/torch/nn/modules/container.py\u001b[0m in \u001b[0;36mforward\u001b[0;34m(self, input)\u001b[0m\n\u001b[1;32m    137\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mforward\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0minput\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    138\u001b[0m         \u001b[0;32mfor\u001b[0m \u001b[0mmodule\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 139\u001b[0;31m             \u001b[0minput\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mmodule\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0minput\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    140\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0minput\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    141\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.7/dist-packages/torch/nn/modules/module.py\u001b[0m in \u001b[0;36m_call_impl\u001b[0;34m(self, *input, **kwargs)\u001b[0m\n\u001b[1;32m   1128\u001b[0m         if not (self._backward_hooks or self._forward_hooks or self._forward_pre_hooks or _global_backward_hooks\n\u001b[1;32m   1129\u001b[0m                 or _global_forward_hooks or _global_forward_pre_hooks):\n\u001b[0;32m-> 1130\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mforward_call\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0minput\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1131\u001b[0m         \u001b[0;31m# Do not call functions when jit is used\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1132\u001b[0m         \u001b[0mfull_backward_hooks\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mnon_full_backward_hooks\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.7/dist-packages/torchvision/models/convnext.py\u001b[0m in \u001b[0;36mforward\u001b[0;34m(self, input)\u001b[0m\n\u001b[1;32m     61\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     62\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mforward\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0minput\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mTensor\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m->\u001b[0m \u001b[0mTensor\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 63\u001b[0;31m         \u001b[0mresult\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mlayer_scale\u001b[0m \u001b[0;34m*\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mblock\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0minput\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     64\u001b[0m         \u001b[0mresult\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mstochastic_depth\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mresult\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     65\u001b[0m         \u001b[0mresult\u001b[0m \u001b[0;34m+=\u001b[0m \u001b[0minput\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.7/dist-packages/torch/nn/modules/module.py\u001b[0m in \u001b[0;36m_call_impl\u001b[0;34m(self, *input, **kwargs)\u001b[0m\n\u001b[1;32m   1128\u001b[0m         if not (self._backward_hooks or self._forward_hooks or self._forward_pre_hooks or _global_backward_hooks\n\u001b[1;32m   1129\u001b[0m                 or _global_forward_hooks or _global_forward_pre_hooks):\n\u001b[0;32m-> 1130\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mforward_call\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0minput\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1131\u001b[0m         \u001b[0;31m# Do not call functions when jit is used\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1132\u001b[0m         \u001b[0mfull_backward_hooks\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mnon_full_backward_hooks\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.7/dist-packages/torch/nn/modules/container.py\u001b[0m in \u001b[0;36mforward\u001b[0;34m(self, input)\u001b[0m\n\u001b[1;32m    137\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mforward\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0minput\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    138\u001b[0m         \u001b[0;32mfor\u001b[0m \u001b[0mmodule\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 139\u001b[0;31m             \u001b[0minput\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mmodule\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0minput\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    140\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0minput\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    141\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.7/dist-packages/torch/nn/modules/module.py\u001b[0m in \u001b[0;36m_call_impl\u001b[0;34m(self, *input, **kwargs)\u001b[0m\n\u001b[1;32m   1128\u001b[0m         if not (self._backward_hooks or self._forward_hooks or self._forward_pre_hooks or _global_backward_hooks\n\u001b[1;32m   1129\u001b[0m                 or _global_forward_hooks or _global_forward_pre_hooks):\n\u001b[0;32m-> 1130\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mforward_call\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0minput\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1131\u001b[0m         \u001b[0;31m# Do not call functions when jit is used\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1132\u001b[0m         \u001b[0mfull_backward_hooks\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mnon_full_backward_hooks\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.7/dist-packages/torch/nn/modules/conv.py\u001b[0m in \u001b[0;36mforward\u001b[0;34m(self, input)\u001b[0m\n\u001b[1;32m    455\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    456\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mforward\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0minput\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mTensor\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m->\u001b[0m \u001b[0mTensor\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 457\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_conv_forward\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0minput\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mweight\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mbias\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    458\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    459\u001b[0m \u001b[0;32mclass\u001b[0m \u001b[0mConv3d\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0m_ConvNd\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.7/dist-packages/torch/nn/modules/conv.py\u001b[0m in \u001b[0;36m_conv_forward\u001b[0;34m(self, input, weight, bias)\u001b[0m\n\u001b[1;32m    452\u001b[0m                             _pair(0), self.dilation, self.groups)\n\u001b[1;32m    453\u001b[0m         return F.conv2d(input, weight, bias, self.stride,\n\u001b[0;32m--> 454\u001b[0;31m                         self.padding, self.dilation, self.groups)\n\u001b[0m\u001b[1;32m    455\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    456\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mforward\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0minput\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mTensor\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m->\u001b[0m \u001b[0mTensor\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mKeyboardInterrupt\u001b[0m: "
          ]
        }
      ],
      "source": [
        "seed_everything(141)\n",
        "accur = evaluate_task(shelby, val_dataloader)\n",
        "print(f'Accuracy: {accur}')\n",
        "print(f\"Оценка за это задание составит {np.clip(10 * (accur - 0.5) / 0.34, 0, 10):.2f} баллов\")"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Сначала пробовал разные предобученные модели из класса efficientnet, но максимальное полученное качество было 0,58\n",
        "#Затем экспериментировал с классом convnext, наилучшее качество вышло у convnext_base - 0,8287.\n",
        "#Из гиперпараметров подбирал шаг - лучший вышел 0,001 (были еще 0,0001; 0,005; 0,0005), а также количество эпох - 1, 2 и 5 (остановился на 5)\n",
        "#Ссылка на отчет wandb по наилучшей модели: https://wandb.ai/yaponsky_boh/lightning_logs/reports/Convnext_base--VmlldzoyOTM1OTM2?accessToken=qo1jw87v91map78xeij6h10uyc1hju4wkdsmwnx0fn2u8nxon43q33s49rfrugwb"
      ],
      "metadata": {
        "id": "_30p4cYHhBY9"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#Отчёт по всем прогонам в wandb: https://wandb.ai/yaponsky_boh/lightning_logs/reports/Total-abyss--VmlldzoyOTM2MTkz?accessToken=krcwizpbisz41n24q4b002chscmo0bxay23bth5xa5ahjn8fisn31fxy447cbhlf"
      ],
      "metadata": {
        "id": "km03D-FQs9nR"
      },
      "execution_count": null,
      "outputs": []
    }
  ],
  "metadata": {
    "colab": {
      "collapsed_sections": [],
      "provenance": []
    },
    "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.8.5"
    },
    "max_cell_id": 35,
    "widgets": {
      "application/vnd.jupyter.widget-state+json": {
        "cfbe6aadc48448eba443e7dc2544d09a": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HBoxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HBoxView",
            "box_style": "",
            "children": [
              "IPY_MODEL_75f3fb3722b049f1909ca5b09335c61d",
              "IPY_MODEL_98e78af20d7f4908962aa7a8dac2480c",
              "IPY_MODEL_d159907143c5455b96fd0cb416fb3d1a"
            ],
            "layout": "IPY_MODEL_9e17022334a643aca61074e5ba0fbc64"
          }
        },
        "75f3fb3722b049f1909ca5b09335c61d": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_9e9896492dcb45e180ae679cbb7525b0",
            "placeholder": "​",
            "style": "IPY_MODEL_94d3f88355b14b9cb8586d20b3a11a81",
            "value": "Sanity Checking DataLoader 0: 100%"
          }
        },
        "98e78af20d7f4908962aa7a8dac2480c": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "FloatProgressModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "ProgressView",
            "bar_style": "",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_046710c133cd4ea89ef7c8b7aa8cacd0",
            "max": 2,
            "min": 0,
            "orientation": "horizontal",
            "style": "IPY_MODEL_a9d471cce9ea4c0bbcc98f779d4642dd",
            "value": 2
          }
        },
        "d159907143c5455b96fd0cb416fb3d1a": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_4fae5dd480c4493a84c9613194c16f0a",
            "placeholder": "​",
            "style": "IPY_MODEL_640d7d8b8577415580835bac24394ebf",
            "value": " 2/2 [00:01&lt;00:00,  1.13it/s]"
          }
        },
        "9e17022334a643aca61074e5ba0fbc64": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": "inline-flex",
            "flex": null,
            "flex_flow": "row wrap",
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": "hidden",
            "width": "100%"
          }
        },
        "9e9896492dcb45e180ae679cbb7525b0": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "94d3f88355b14b9cb8586d20b3a11a81": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "046710c133cd4ea89ef7c8b7aa8cacd0": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": "2",
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "a9d471cce9ea4c0bbcc98f779d4642dd": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ProgressStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "bar_color": null,
            "description_width": ""
          }
        },
        "4fae5dd480c4493a84c9613194c16f0a": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "640d7d8b8577415580835bac24394ebf": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "c72e8a5b6c88431399fee89aec7e71cb": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HBoxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HBoxView",
            "box_style": "",
            "children": [
              "IPY_MODEL_a27de058cb1a45bab8ee4d3dbbb5159f",
              "IPY_MODEL_c51dc898deaa4a5fbea95e5ecf855f67",
              "IPY_MODEL_bc1d08d98b464803b094397a205c43d2"
            ],
            "layout": "IPY_MODEL_ef54b5ffb5864612901bbfc4de95a287"
          }
        },
        "a27de058cb1a45bab8ee4d3dbbb5159f": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_7f7f86f4d1204581bd869cf6cdeb1bbc",
            "placeholder": "​",
            "style": "IPY_MODEL_cb5f6e2d166245cd930e4e8fe25151e3",
            "value": "Epoch 0: 100%"
          }
        },
        "c51dc898deaa4a5fbea95e5ecf855f67": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "FloatProgressModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "ProgressView",
            "bar_style": "success",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_f043228d60fc42c0836afc6ef6832b1b",
            "max": 3438,
            "min": 0,
            "orientation": "horizontal",
            "style": "IPY_MODEL_885f30521438428e9a3dab88286faf9a",
            "value": 3438
          }
        },
        "bc1d08d98b464803b094397a205c43d2": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_cd652f2a23df45a1b760c8039dd80f95",
            "placeholder": "​",
            "style": "IPY_MODEL_fd3fce825dc343689b1810cd3788f42b",
            "value": " 3438/3438 [03:25&lt;00:00, 16.73it/s, loss=3.58, v_num=enat, train_loss=3.380, val_loss=3.650]"
          }
        },
        "ef54b5ffb5864612901bbfc4de95a287": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": "inline-flex",
            "flex": null,
            "flex_flow": "row wrap",
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": "100%"
          }
        },
        "7f7f86f4d1204581bd869cf6cdeb1bbc": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "cb5f6e2d166245cd930e4e8fe25151e3": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "f043228d60fc42c0836afc6ef6832b1b": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": "2",
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "885f30521438428e9a3dab88286faf9a": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ProgressStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "bar_color": null,
            "description_width": ""
          }
        },
        "cd652f2a23df45a1b760c8039dd80f95": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "fd3fce825dc343689b1810cd3788f42b": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "567b90101693430693c13f43a4c9fe3f": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HBoxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HBoxView",
            "box_style": "",
            "children": [
              "IPY_MODEL_234bd50f3bea4a988409755726d5b06d",
              "IPY_MODEL_e86da66101bc49449062d59983d2b7f3",
              "IPY_MODEL_c9df42905f63484c877c8a9a8e72d5cf"
            ],
            "layout": "IPY_MODEL_f3073e0d6ddd499983259cf72c1cc3d8"
          }
        },
        "234bd50f3bea4a988409755726d5b06d": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_355e66b80227426bb8ae03476f3fdaf2",
            "placeholder": "​",
            "style": "IPY_MODEL_1591b56ac5a2454fa64229f64fe46d1f",
            "value": "Validation DataLoader 0: 100%"
          }
        },
        "e86da66101bc49449062d59983d2b7f3": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "FloatProgressModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "ProgressView",
            "bar_style": "",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_1a557b554af04baf85913014c5c4c839",
            "max": 313,
            "min": 0,
            "orientation": "horizontal",
            "style": "IPY_MODEL_4de1b821a0574c2cbf93a5810a4ead50",
            "value": 313
          }
        },
        "c9df42905f63484c877c8a9a8e72d5cf": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_fde0ccfa5d814f62b5ce7771b9849f32",
            "placeholder": "​",
            "style": "IPY_MODEL_806e6e6e7d954d7f932e5559f04152ce",
            "value": " 313/313 [00:13&lt;00:00, 23.71it/s]"
          }
        },
        "f3073e0d6ddd499983259cf72c1cc3d8": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": "inline-flex",
            "flex": null,
            "flex_flow": "row wrap",
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": "hidden",
            "width": "100%"
          }
        },
        "355e66b80227426bb8ae03476f3fdaf2": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "1591b56ac5a2454fa64229f64fe46d1f": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "1a557b554af04baf85913014c5c4c839": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": "2",
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "4de1b821a0574c2cbf93a5810a4ead50": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ProgressStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "bar_color": null,
            "description_width": ""
          }
        },
        "fde0ccfa5d814f62b5ce7771b9849f32": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "806e6e6e7d954d7f932e5559f04152ce": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "b643ad7d04ad4bd89c931b17469c5a5c": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HBoxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HBoxView",
            "box_style": "",
            "children": [
              "IPY_MODEL_d8ab733e62f04bc49ac11a745ec776dc",
              "IPY_MODEL_ca4ab65205844a9e99709a8df7cf848e",
              "IPY_MODEL_211006f0887847e4ab968d551b4e0478"
            ],
            "layout": "IPY_MODEL_673b1c17d6b846d691066761be2f3866"
          }
        },
        "d8ab733e62f04bc49ac11a745ec776dc": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_afe5b788959e43f4a0db5cecc248c551",
            "placeholder": "​",
            "style": "IPY_MODEL_f0c410de9c4642fb984cc847c253d06b",
            "value": "100%"
          }
        },
        "ca4ab65205844a9e99709a8df7cf848e": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "FloatProgressModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "ProgressView",
            "bar_style": "success",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_b3d6e3edc2fc4952a4c8b4bcc85788d0",
            "max": 791189585,
            "min": 0,
            "orientation": "horizontal",
            "style": "IPY_MODEL_f829a4c3c27e455d97fff1b08c258ad0",
            "value": 791189585
          }
        },
        "211006f0887847e4ab968d551b4e0478": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_cef5d0b8a689440d89fa886700a6a1a2",
            "placeholder": "​",
            "style": "IPY_MODEL_f5d508757ff84858b9959f88665ff0ab",
            "value": " 755M/755M [00:15&lt;00:00, 48.5MB/s]"
          }
        },
        "673b1c17d6b846d691066761be2f3866": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "afe5b788959e43f4a0db5cecc248c551": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "f0c410de9c4642fb984cc847c253d06b": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "b3d6e3edc2fc4952a4c8b4bcc85788d0": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "f829a4c3c27e455d97fff1b08c258ad0": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ProgressStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "bar_color": null,
            "description_width": ""
          }
        },
        "cef5d0b8a689440d89fa886700a6a1a2": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "f5d508757ff84858b9959f88665ff0ab": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "8656511b1384444f89bfc0443bbb9eab": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HBoxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HBoxView",
            "box_style": "",
            "children": [
              "IPY_MODEL_61d7ebcb414143869e71a1c30bd3fbf3",
              "IPY_MODEL_d5d33dd89df1490b966fb67934b60986",
              "IPY_MODEL_ef05c42673d345cf934c662ae9657cf6"
            ],
            "layout": "IPY_MODEL_9ad0497e705a48308a7e506b51ddd0ce"
          }
        },
        "61d7ebcb414143869e71a1c30bd3fbf3": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_2d360e90c4654a2c86ef9e75e7eee019",
            "placeholder": "​",
            "style": "IPY_MODEL_912018c5fdab4a06882d2a8fe0519789",
            "value": "Sanity Checking DataLoader 0: 100%"
          }
        },
        "d5d33dd89df1490b966fb67934b60986": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "FloatProgressModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "ProgressView",
            "bar_style": "",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_37a40d08c0bb429cb11dae0447d4e69f",
            "max": 2,
            "min": 0,
            "orientation": "horizontal",
            "style": "IPY_MODEL_36540d37c2be47a18ca03e9b74e98216",
            "value": 2
          }
        },
        "ef05c42673d345cf934c662ae9657cf6": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_8b3e37dc7f694ff39944ba6ede660219",
            "placeholder": "​",
            "style": "IPY_MODEL_acbfb678a5be4e18ac5037a37f134606",
            "value": " 2/2 [00:08&lt;00:00,  4.02s/it]"
          }
        },
        "9ad0497e705a48308a7e506b51ddd0ce": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": "inline-flex",
            "flex": null,
            "flex_flow": "row wrap",
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": "hidden",
            "width": "100%"
          }
        },
        "2d360e90c4654a2c86ef9e75e7eee019": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "912018c5fdab4a06882d2a8fe0519789": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "37a40d08c0bb429cb11dae0447d4e69f": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": "2",
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "36540d37c2be47a18ca03e9b74e98216": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ProgressStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "bar_color": null,
            "description_width": ""
          }
        },
        "8b3e37dc7f694ff39944ba6ede660219": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "acbfb678a5be4e18ac5037a37f134606": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "210e63aa2b74497587c4fc7313b9e804": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HBoxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HBoxView",
            "box_style": "",
            "children": [
              "IPY_MODEL_de801f1f5f994583976f18aebee955f0",
              "IPY_MODEL_b3c1ce7ef2ff41f98f66603d47a56009",
              "IPY_MODEL_0d0bf89f013748c5bdafb7ca7f51cda3"
            ],
            "layout": "IPY_MODEL_8d7c2f5c1c324ebe935de154e45aea3c"
          }
        },
        "de801f1f5f994583976f18aebee955f0": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_fc3245864905403ebb222642cc673679",
            "placeholder": "​",
            "style": "IPY_MODEL_851f93d54b9e4082a718a119607876bd",
            "value": "Epoch 1:   7%"
          }
        },
        "b3c1ce7ef2ff41f98f66603d47a56009": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "FloatProgressModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "ProgressView",
            "bar_style": "",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_c5774eb385d2434981fa71f5b2bf3470",
            "max": 3438,
            "min": 0,
            "orientation": "horizontal",
            "style": "IPY_MODEL_a88818f56eb94873a5e699ffdb6f20f1",
            "value": 227
          }
        },
        "0d0bf89f013748c5bdafb7ca7f51cda3": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_aca8e9e9193646df9cead76e29e24bb9",
            "placeholder": "​",
            "style": "IPY_MODEL_74cd741545bf4521b2f4bea14b008507",
            "value": " 227/3438 [03:33&lt;50:24,  1.06it/s, loss=1.76, v_num=ht3a, train_loss=1.870, val_loss=1.240, accuracy=0.782]"
          }
        },
        "8d7c2f5c1c324ebe935de154e45aea3c": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": "inline-flex",
            "flex": null,
            "flex_flow": "row wrap",
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": "100%"
          }
        },
        "fc3245864905403ebb222642cc673679": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "851f93d54b9e4082a718a119607876bd": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "c5774eb385d2434981fa71f5b2bf3470": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": "2",
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "a88818f56eb94873a5e699ffdb6f20f1": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ProgressStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "bar_color": null,
            "description_width": ""
          }
        },
        "aca8e9e9193646df9cead76e29e24bb9": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "74cd741545bf4521b2f4bea14b008507": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "0f6876e825044aedbba24612af4dd544": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HBoxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HBoxView",
            "box_style": "",
            "children": [
              "IPY_MODEL_74ea8439b8dc40708039ab99f75ac128",
              "IPY_MODEL_be5426327bfc4e39ac9826be03dbf1fb",
              "IPY_MODEL_b4d4b06abd3b4c40b7a36a123c9b3744"
            ],
            "layout": "IPY_MODEL_56d43dd4919043ad8b19747e8bded24b"
          }
        },
        "74ea8439b8dc40708039ab99f75ac128": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_59b372d89afe4d0bac3b41704b9f8bcf",
            "placeholder": "​",
            "style": "IPY_MODEL_94b74ea8f9fa417b8f4c6b1b5b608c6f",
            "value": "Validation DataLoader 0: 100%"
          }
        },
        "be5426327bfc4e39ac9826be03dbf1fb": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "FloatProgressModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "ProgressView",
            "bar_style": "",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_23cc387faad94c45ae7dc5a096235435",
            "max": 313,
            "min": 0,
            "orientation": "horizontal",
            "style": "IPY_MODEL_088125110f874319a34facdd2436aea7",
            "value": 313
          }
        },
        "b4d4b06abd3b4c40b7a36a123c9b3744": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_4638b01f11e248b59a8528bee3a2061a",
            "placeholder": "​",
            "style": "IPY_MODEL_f82dbad454194c17be55a8e298dd2a38",
            "value": " 313/313 [04:47&lt;00:00,  1.09it/s]"
          }
        },
        "56d43dd4919043ad8b19747e8bded24b": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": "inline-flex",
            "flex": null,
            "flex_flow": "row wrap",
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": "hidden",
            "width": "100%"
          }
        },
        "59b372d89afe4d0bac3b41704b9f8bcf": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "94b74ea8f9fa417b8f4c6b1b5b608c6f": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "23cc387faad94c45ae7dc5a096235435": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": "2",
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "088125110f874319a34facdd2436aea7": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ProgressStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "bar_color": null,
            "description_width": ""
          }
        },
        "4638b01f11e248b59a8528bee3a2061a": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "f82dbad454194c17be55a8e298dd2a38": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        }
      }
    },
    "accelerator": "GPU",
    "gpuClass": "standard"
  },
  "nbformat": 4,
  "nbformat_minor": 0
}
